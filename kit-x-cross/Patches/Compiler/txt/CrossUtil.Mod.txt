MODULE CrossUtil;
  IMPORT Files;

  CONST
    C4 = 10H; C5 = 20H; C6 = 40H; C8 = 100H; C10 = 400H; C11 = 800H; C12 = 1000H; C14 = 4000H; C16 = 10000H; C18 = 40000H; 
    C20 = 100000H; C21 = 200000H; C22 = 400000H; C24 = 1000000H; C26 = 4000000H; C28 = 10000000H; C30 = 40000000H; C31 = 80000000H;

  PROCEDURE InvertEndian*(x: INTEGER): INTEGER;
  BEGIN
    RETURN
      (x DIV C24 MOD C8) + 
      (x DIV C16 MOD C8) * C8 + 
      (x DIV C8  MOD C8) * C16 + 
      (x DIV 1H  MOD C8) * C24
  END InvertEndian;

  PROCEDURE WriteIntBE*(VAR R: Files.Rider; val: INTEGER);
  BEGIN
    Files.WriteByte(R, val DIV C24 MOD C8);
    Files.WriteByte(R, val DIV C16 MOD C8);
    Files.WriteByte(R, val DIV C8 MOD C8);
    Files.WriteByte(R, val MOD C8)
  END WriteIntBE;

  PROCEDURE ReadIntBE*(VAR R: Files.Rider; VAR val: INTEGER);
    VAR t0, t1, t2, t3: BYTE;
  BEGIN
    Files.ReadByte(R, t0);
    Files.ReadByte(R, t1);
    Files.ReadByte(R, t2);
    Files.ReadByte(R, t3);
    val := t0 * C24 + t1 * C16 + t2 * C8 + t3;
  END ReadIntBE;

END CrossUtil.
