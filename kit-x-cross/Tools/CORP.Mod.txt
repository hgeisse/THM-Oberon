MODULE CORP; (*N. Wirth 1.7.97 / 8.3.2020  Oberon compiler for RISC in Oberon-07 / AP 1.5.20 Extended Oberon*)
  IMPORT Texts, Oberon, ORS, CORB, CORG;
  (*Author: Niklaus Wirth, 2014. Oberon-2 extensions by Andreas Pirklbauer, 2020.
    Parser of Oberon-RISC compiler. Uses Scanner ORS to obtain symbols (tokens),
    CORB for definition of data structures and for handling import and export, and
    CORG to produce binary code. ORP performs type checking and data allocation.
    Parser is target-independent, except for part of the handling of allocations.*)

  CONST NofCases = 256; C20 = 100000H;

  TYPE PtrBase = POINTER TO PtrBaseDesc;
    PtrBaseDesc = RECORD  (*list of names of pointer base types*)
      name: ORS.Ident; type: CORB.Type; next: PtrBase
    END ;
  
  VAR sym: INTEGER;   (*last symbol read*)
    dc: LONGINT;    (*data counter*)
    level, exno, version: INTEGER;
    newSF: BOOLEAN;  (*option flag*)
    expression: PROCEDURE (VAR x: CORG.Item);  (*to avoid forward reference*)
    Type: PROCEDURE (VAR type: CORB.Type);
    FormalType: PROCEDURE (VAR typ: CORB.Type; dim: INTEGER);
    modid: ORS.Ident;
    pbsList: PtrBase;   (*list of names of pointer base types*)
    dummy: CORB.Object;
    W: Texts.Writer;

  PROCEDURE Check(s: INTEGER; msg: ARRAY OF CHAR);
  BEGIN
    IF sym = s THEN ORS.Get(sym) ELSE ORS.Mark(msg) END
  END Check;

  PROCEDURE qualident(VAR obj: CORB.Object);
  BEGIN obj := CORB.thisObj(); ORS.Get(sym);
    IF obj = NIL THEN ORS.Mark("undef"); obj := dummy END ;
    IF (sym = ORS.period) & (obj.class = CORB.Mod) THEN
      ORS.Get(sym);
      IF sym = ORS.ident THEN obj := CORB.thisimport(obj); ORS.Get(sym);
        IF obj = NIL THEN ORS.Mark("undef"); obj := dummy END
      ELSE ORS.Mark("identifier expected"); obj := dummy
      END
    ELSIF (obj.lev > 0) & (obj.lev # level) &
      ((obj.class # CORB.Const) OR (obj.type.form # CORB.Proc)) THEN ORS.Mark("not accessible")
    END
  END qualident;

  PROCEDURE CheckBool(VAR x: CORG.Item);
  BEGIN
    IF x.type.form # CORB.Bool THEN ORS.Mark("not Boolean"); x.type := CORB.boolType END
  END CheckBool;

  PROCEDURE CheckInt(VAR x: CORG.Item);
  BEGIN
    IF x.type.form # CORB.Int THEN ORS.Mark("not Integer"); x.type := CORB.intType END
  END CheckInt;

  PROCEDURE CheckReal(VAR x: CORG.Item);
  BEGIN
    IF x.type.form # CORB.Real THEN ORS.Mark("not Real"); x.type := CORB.realType END
  END CheckReal;

  PROCEDURE CheckSet(VAR x: CORG.Item);
  BEGIN
    IF x.type.form # CORB.Set THEN ORS.Mark("not Set"); x.type := CORB.setType END 
  END CheckSet;

  PROCEDURE CheckSetVal(VAR x: CORG.Item);
  BEGIN
    IF x.type.form # CORB.Int THEN ORS.Mark("not Int"); x.type := CORB.setType
    ELSIF x.mode = CORB.Const THEN
      IF (x.a < 0) OR (x.a >= 32) THEN ORS.Mark("invalid set") END
    END 
  END CheckSetVal;

  PROCEDURE CheckConst(VAR x: CORG.Item);
  BEGIN
    IF x.mode # CORB.Const THEN ORS.Mark("not a constant"); x.mode := CORB.Const END
  END CheckConst;

  PROCEDURE CheckReadOnly(VAR x: CORG.Item);
  BEGIN
    IF x.rdo THEN ORS.Mark("read-only") END
  END CheckReadOnly;

  PROCEDURE CheckExport(VAR expo: BOOLEAN);
  BEGIN
    IF sym = ORS.times THEN
      expo := TRUE; ORS.Get(sym);
      IF level # 0 THEN ORS.Mark("remove asterisk") END
    ELSE expo := FALSE
    END
  END CheckExport;

  PROCEDURE IsExtension(t0, t1: CORB.Type): BOOLEAN;
  BEGIN (*t1 is an extension of t0*)
    RETURN (t0 = t1) OR (t1 # NIL) & IsExtension(t0, t1.base)
  END IsExtension;

  PROCEDURE CheckCaseExpr(VAR x: CORG.Item);
  BEGIN
    IF ~(x.type.form IN {CORB.Int, CORB.Byte, CORB.Char}) THEN ORS.Mark("invalid type"); x.type := CORB.intType END
  END CheckCaseExpr;

  PROCEDURE CheckReceiver(proc: CORB.Object; deref: BOOLEAN);
  BEGIN
    IF ~deref & (proc.type.dsc.class # CORB.Par) THEN ORS.Mark("incompatible receiver") END
  END CheckReceiver;

  PROCEDURE DisallowMethods(rec: CORB.Type);  (*disallow binding methods to rec and its base types*)
  BEGIN
    WHILE rec # NIL DO rec.typobj.val := 1; rec := rec.base END
  END DisallowMethods;

  (* expressions *)

  PROCEDURE TypeTest(VAR x: CORG.Item; T: CORB.Type; guard: BOOLEAN);
    VAR xt: CORB.Type;
  BEGIN xt := x.type;
    IF (T.form = xt.form ) & ((T.form = CORB.Pointer) OR (T.form = CORB.Record) & (x.mode = CORB.Par)) THEN
      WHILE (xt # T) & (xt # NIL) DO xt := xt.base END ;
      IF xt # T THEN xt := x.type;
        IF xt.form = CORB.Pointer THEN
          IF IsExtension(xt.base, T.base) THEN CORG.TypeTest(x, T.base, FALSE, guard); x.type := T
          ELSE ORS.Mark("not an extension")
          END
        ELSIF (xt.form = CORB.Record) & (x.mode = CORB.Par) THEN
          IF IsExtension(xt, T) THEN  CORG.TypeTest(x, T, TRUE, guard); x.type := T
          ELSE ORS.Mark("not an extension")
          END
        ELSE ORS.Mark("incompatible types")
        END
      ELSIF ~guard THEN CORG.TypeTest(x, NIL, FALSE, FALSE)
      END
    ELSE ORS.Mark("type mismatch")
    END ;
    IF ~guard THEN x.type := CORB.boolType END
  END TypeTest;

  PROCEDURE selector(VAR x: CORG.Item);
    VAR y: CORG.Item; obj, fld: CORB.Object; xt: CORB.Type; deref: BOOLEAN;
  BEGIN deref := FALSE;
    WHILE (sym = ORS.lbrak) OR (sym = ORS.period) OR (sym = ORS.arrow)
        OR (sym = ORS.lparen) & (x.type.form IN {CORB.Record, CORB.Pointer}) DO
      IF sym = ORS.lbrak THEN
        IF x.type.form = CORB.Pointer THEN CORG.DeRef(x); x.type := x.type.base END ;
        REPEAT ORS.Get(sym); expression(y);
          IF x.type.form = CORB.Array THEN
            CheckInt(y); CORG.Index(x, y); x.type := x.type.base
          ELSE ORS.Mark("not an array")
          END
        UNTIL sym # ORS.comma;
        Check(ORS.rbrak, "no ]"); deref := FALSE
      ELSIF sym = ORS.period THEN ORS.Get(sym);
        IF sym = ORS.ident THEN
          IF x.type.form = CORB.Pointer THEN CORG.DeRef(x); x.type := x.type.base; deref := TRUE END ;
          IF x.type.form = CORB.Record THEN
            obj := CORB.thisfield(x.type); ORS.Get(sym);
            IF obj # NIL THEN
              IF obj.type.form = CORB.TProc THEN  (*type-bound procedure*)
                IF sym = ORS.arrow THEN (*super call*)
                  ORS.Get(sym); xt := x.type; fld := CORB.FindFld(obj.name, xt);
                  IF fld # NIL THEN xt := xt.base; fld := NIL;
                    WHILE (xt # NIL) & (fld = NIL) DO fld := CORB.FindFld(obj.name, xt); xt := xt.base END ;
                    IF (fld # NIL) & (fld.type.form = CORB.TProc) THEN obj := fld;
                      CheckReceiver(obj, deref); CORG.Method(x, obj, deref, TRUE); DisallowMethods(x.type.base)
                    ELSE ORS.Mark("method undefined in base types")
                    END
                  ELSE ORS.Mark("method undefined at this extension level")
                  END
                ELSE (*method call*) CheckReceiver(obj, deref); CORG.Method(x, obj, deref, FALSE)
                END
              ELSE CORG.Field(x, obj); deref := FALSE
              END ;
              x.type := obj.type
            ELSE ORS.Mark("undef")
            END
          ELSE ORS.Mark("not a record")
          END
        ELSE ORS.Mark("ident?")
        END
      ELSIF sym = ORS.arrow THEN
        ORS.Get(sym);
        IF x.type.form = CORB.Pointer THEN CORG.DeRef(x); x.type := x.type.base; deref := TRUE
        ELSE ORS.Mark("not a pointer")
        END
      ELSIF (sym = ORS.lparen) & (x.type.form IN {CORB.Record, CORB.Pointer}) THEN (*type guard*)
        ORS.Get(sym);
        IF sym = ORS.ident THEN
          qualident(obj);
          IF obj.class = CORB.Typ THEN TypeTest(x, obj.type, TRUE)
          ELSE ORS.Mark("guard type expected")
          END
        ELSE ORS.Mark("not an identifier")
        END ;
        Check(ORS.rparen, " ) missing")
      END
    END
  END selector;

  PROCEDURE EqualSignatures(t0, t1: CORB.Type): BOOLEAN;
    VAR p0, p1: CORB.Object; com, ext: BOOLEAN;
  BEGIN com := TRUE; ext := FALSE;
    IF (t0.base = t1.base) & (t0.nofpar = t1.nofpar) THEN
      p0 := t0.dsc; p1 := t1.dsc;
      IF t1.form = CORB.TProc THEN  (*type-bound procedure*)
        IF t0.form = CORB.TProc THEN  (*check whether its receiver is an extension of p0*)
          IF p1.type.form = CORB.Pointer THEN ext := IsExtension(p0.type.base, p1.type.base)
          ELSE ext := IsExtension(p0.type, p1.type)
          END
        END ;
        IF ext THEN p0 := p0.next; p1 := p1.next ELSE p0 := NIL; com := FALSE END
      END ;
      WHILE (p0 # NIL) & (p1 # NIL) DO
        IF (p0.class = p1.class) &  (p0.rdo = p1.rdo) &
          ((p0.type = p1.type) OR
          (p0.type.form = CORB.Array) & (p1.type.form = CORB.Array) & (p0.type.len = p1.type.len) & (p0.type.base = p1.type.base) OR
          (p0.type.form = CORB.Proc) & (p1.type.form = CORB.Proc) & EqualSignatures(p0.type, p1.type))
        THEN p0 := p0.next; p1 := p1.next
        ELSE p0 := NIL; com := FALSE
        END
      END
    ELSE com := FALSE
    END ;
    RETURN com
  END EqualSignatures;

  PROCEDURE CompTypes(t0, t1: CORB.Type; varpar: BOOLEAN): BOOLEAN;
  BEGIN (*check for assignment compatibility*)
    RETURN (t0 = t1)    (*openarray assignment disallowed in CORG*)
      OR (t0.form = CORB.Array) & (t1.form = CORB.Array) & (t0.base =  t1.base) & (t0.len = t1.len)
      OR (t0.form = CORB.Record) & (t1.form = CORB.Record)  & IsExtension(t0, t1)
      OR ~varpar &
        ((t0.form = CORB.Pointer) & (t1.form = CORB.Pointer)  & IsExtension(t0.base, t1.base)
        OR (t0.form = CORB.Proc) & (t1.form = CORB.Proc) & EqualSignatures(t0, t1)
        OR (t0.form IN {CORB.Pointer, CORB.Proc}) & (t1.form = CORB.NilTyp))
  END CompTypes;

  PROCEDURE Parameter(par: CORB.Object);
    VAR x: CORG.Item; varpar: BOOLEAN;
  BEGIN expression(x);
    IF par # NIL THEN
      varpar := par.class = CORB.Par;
      IF CompTypes(par.type, x.type, varpar) THEN
        IF ~varpar THEN CORG.ValueParam(x)
        ELSE (*par.class = Par*)
          IF ~par.rdo THEN CheckReadOnly(x) END ;
          CORG.VarParam(x, par.type)
        END
      ELSIF (x.type.form = CORB.Array) & (par.type.form = CORB.Array) &
          (x.type.base = par.type.base) & (par.type.len < 0) THEN
        IF ~par.rdo THEN CheckReadOnly(x) END ;
        CORG.OpenArrayParam(x)
      ELSIF (x.type.form = CORB.String) & varpar & par.rdo & (par.type.form = CORB.Array) & 
          (par.type.base.form = CORB.Char) & (par.type.len < 0) THEN CORG.StringParam(x)
      ELSIF ~varpar & (par.type.form = CORB.Int) & (x.type.form = CORB.Int) THEN CORG.ValueParam(x)  (*BYTE*)
      ELSIF (x.type.form = CORB.String) & (x.b = 2) & (par.class = CORB.Var) & (par.type.form = CORB.Char) THEN
        CORG.StrToChar(x); CORG.ValueParam(x)
      ELSIF (par.type.form = CORB.Array) & (par.type.base = CORB.byteType) & 
          (par.type.len >= 0) & (par.type.size = x.type.size) THEN
        CORG.VarParam(x, par.type)
      ELSE ORS.Mark("incompatible parameters")
      END
    END
  END Parameter;

  PROCEDURE ParamList(VAR x: CORG.Item);
    VAR n: INTEGER; par: CORB.Object;
  BEGIN par := x.type.dsc; n := 0;
    IF x.type.form = CORB.TProc THEN  (*type-bound procedure*)
      IF (par.class = CORB.Par) & ~par.rdo THEN CheckReadOnly(x) END ;
      CORG.ReceiverParam(x, par); INC(n); par := par.next
    END ;
    IF sym # ORS.rparen THEN
      Parameter(par); INC(n);
      WHILE sym <= ORS.comma DO
        Check(ORS.comma, "comma?");
        IF par # NIL THEN par := par.next END ;
        Parameter(par); INC(n)
      END ;
      Check(ORS.rparen, ") missing")
    ELSE ORS.Get(sym);
    END ;
    IF n < x.type.nofpar THEN ORS.Mark("too few params")
    ELSIF n > x.type.nofpar THEN ORS.Mark("too many params")
    END
  END ParamList;

  PROCEDURE StandFunc(VAR x: CORG.Item; fct: LONGINT; restyp: CORB.Type);
    VAR y: CORG.Item; n, npar: LONGINT;
  BEGIN Check(ORS.lparen, "no (");
    npar := fct MOD 10; fct := fct DIV 10; expression(x); n := 1;
    WHILE sym = ORS.comma DO ORS.Get(sym); expression(y); INC(n) END ;
    Check(ORS.rparen, "no )");
    IF n = npar THEN
      IF fct = 0 THEN (*ABS*)
        IF x.type.form IN {CORB.Int, CORB.Real} THEN CORG.Abs(x); restyp := x.type ELSE ORS.Mark("bad type") END
      ELSIF fct = 1 THEN (*ODD*) CheckInt(x); CORG.Odd(x)
      ELSIF fct = 2 THEN (*FLOOR*) CheckReal(x); CORG.Floor(x)
      ELSIF fct = 3 THEN (*FLT*) CheckInt(x); CORG.Float(x)
      ELSIF fct = 4 THEN (*ORD*)
        IF x.type.form <= CORB.Proc THEN CORG.Ord(x)
        ELSIF (x.type.form = CORB.String) & (x.b = 2) THEN CORG.StrToChar(x)
        ELSE ORS.Mark("bad type")
        END
      ELSIF fct = 5 THEN (*CHR*) CheckInt(x); CORG.Ord(x)
      ELSIF fct = 6 THEN (*LEN*)
          IF x.type.form = CORB.Array THEN CORG.Len(x) ELSE ORS.Mark("not an array") END
      ELSIF fct IN {7, 8, 9} THEN (*LSL, ASR, ROR*) CheckInt(y);
        IF x.type.form IN {CORB.Int, CORB.Set} THEN CORG.Shift(fct-7, x, y); restyp := x.type ELSE ORS.Mark("bad type") END
      ELSIF fct = 13 THEN (*UML*) CORG.UML(x, y)
      ELSIF fct = 14 THEN (*BIT*) CheckInt(x); CheckInt(y); CORG.Bit(x, y)
      ELSIF fct = 15 THEN (*REG*) CheckConst(x); CheckInt(x); CORG.Register(x)
      ELSIF fct = 16 THEN (*VAL*)
        IF (x.mode= CORB.Typ) & (x.type.size <= y.type.size) THEN restyp := x.type; x := y
        ELSE ORS.Mark("casting not allowed")
        END
      ELSIF fct = 17 THEN (*ADR*) CORG.Adr(x)
      ELSIF fct = 18 THEN (*SIZE*)
        IF x.mode = CORB.Typ THEN CORG.MakeConstItem(x, CORB.intType, x.type.size)
        ELSE ORS.Mark("must be a type")
        END
      ELSIF fct = 19 THEN (*COND*) CheckConst(x); CheckInt(x); CORG.Condition(x)
      END ;
      x.type := restyp
    ELSE ORS.Mark("wrong nof params")
    END
  END StandFunc;

  PROCEDURE element(VAR x: CORG.Item);
    VAR y: CORG.Item;
  BEGIN expression(x); CheckSetVal(x);
    IF sym = ORS.upto THEN ORS.Get(sym); expression(y); CheckSetVal(y); CORG.Set(x, y)
    ELSE CORG.Singleton(x)
    END ;
    x.type := CORB.setType
  END element;
  
  PROCEDURE set(VAR x: CORG.Item);
    VAR y: CORG.Item;
  BEGIN
    IF sym >= ORS.if THEN
      IF sym # ORS.rbrace THEN ORS.Mark(" } missing") END ;
      CORG.MakeConstItem(x, CORB.setType, 0) (*empty set*)
    ELSE element(x);
      WHILE (sym <= ORS.comma) OR (sym = ORS.semicolon) DO
        IF sym = ORS.comma THEN ORS.Get(sym) ELSE ORS.Mark("comma?") END ;
        element(y); CORG.SetOp(ORS.plus, x, y)
      END
    END
  END set; 

  PROCEDURE factor(VAR x: CORG.Item);
    VAR obj: CORB.Object; rx: LONGINT;
  BEGIN (*sync*)
    IF (sym < ORS.char) OR (sym > ORS.ident) THEN ORS.Mark("expression expected");
      REPEAT ORS.Get(sym) UNTIL (sym >= ORS.char) & (sym <= ORS.for) OR (sym >= ORS.then)
    END ;
    IF sym = ORS.ident THEN
      qualident(obj);
      IF obj.class = CORB.SFunc THEN StandFunc(x, obj.val, obj.type)
      ELSE CORG.MakeItem(x, obj, level); selector(x);
        IF sym = ORS.lparen THEN
          ORS.Get(sym);
          IF (x.type.form IN {CORB.Proc, CORB.TProc}) & (x.type.base.form # CORB.NoTyp) THEN
            CORG.PrepCall(x, rx); ParamList(x); CORG.Call(x, rx); x.type := x.type.base
          ELSE ORS.Mark("not a function"); ParamList(x)
          END
        END
      END
    ELSIF sym = ORS.int THEN CORG.MakeConstItem(x, CORB.intType, ORS.ival); ORS.Get(sym)
    ELSIF sym = ORS.real THEN CORG.MakeRealItem(x, ORS.rval); ORS.Get(sym)
    ELSIF sym = ORS.char THEN CORG.MakeConstItem(x, CORB.charType, ORS.ival); ORS.Get(sym)
    ELSIF sym = ORS.nil THEN ORS.Get(sym); CORG.MakeConstItem(x, CORB.nilType, 0)
    ELSIF sym = ORS.string THEN CORG.MakeStringItem(x, ORS.slen); ORS.Get(sym)
    ELSIF sym = ORS.lparen THEN ORS.Get(sym); expression(x); Check(ORS.rparen, "no )")
    ELSIF sym = ORS.lbrace THEN ORS.Get(sym); set(x); Check(ORS.rbrace, "no }")
    ELSIF sym = ORS.not THEN ORS.Get(sym); factor(x); CheckBool(x); CORG.Not(x)
    ELSIF sym = ORS.false THEN ORS.Get(sym); CORG.MakeConstItem(x, CORB.boolType, 0)
    ELSIF sym = ORS.true THEN ORS.Get(sym); CORG.MakeConstItem(x, CORB.boolType, 1)
    ELSE ORS.Mark("not a factor"); CORG.MakeConstItem(x, CORB.intType, 0)
    END
  END factor;

  PROCEDURE term(VAR x: CORG.Item);
    VAR y: CORG.Item; op, f: INTEGER;
  BEGIN factor(x); f := x.type.form;
    WHILE (sym >= ORS.times) & (sym <= ORS.and) DO
      op := sym; ORS.Get(sym);
      IF op = ORS.times THEN
        IF f = CORB.Int THEN factor(y); CheckInt(y); CORG.MulOp(x, y)
        ELSIF f = CORB.Real THEN factor(y); CheckReal(y); CORG.RealOp(op, x, y)
        ELSIF f = CORB.Set THEN factor(y); CheckSet(y); CORG.SetOp(op, x, y)
        ELSE ORS.Mark("bad type")
        END
      ELSIF (op = ORS.div) OR (op = ORS.mod) THEN
        CheckInt(x); factor(y); CheckInt(y); CORG.DivOp(op, x, y)
      ELSIF op = ORS.rdiv THEN
        IF f = CORB.Real THEN factor(y); CheckReal(y); CORG.RealOp(op, x, y)
        ELSIF f = CORB.Set THEN factor(y); CheckSet(y); CORG.SetOp(op, x, y)
        ELSE ORS.Mark("bad type")
        END
      ELSE (*op = and*) CheckBool(x); CORG.And1(x); factor(y); CheckBool(y); CORG.And2(x, y)
      END
    END
  END term;

  PROCEDURE SimpleExpression(VAR x: CORG.Item);
    VAR y: CORG.Item; op: INTEGER;
  BEGIN
    IF sym = ORS.minus THEN ORS.Get(sym); term(x);
      IF x.type.form IN {CORB.Int, CORB.Real, CORB.Set} THEN CORG.Neg(x) ELSE CheckInt(x) END
    ELSIF sym = ORS.plus THEN ORS.Get(sym); term(x);
    ELSE term(x)
    END ;
    WHILE (sym >= ORS.plus) & (sym <= ORS.or) DO
      op := sym; ORS.Get(sym);
      IF op = ORS.or THEN CORG.Or1(x); CheckBool(x); term(y); CheckBool(y); CORG.Or2(x, y)
      ELSIF x.type.form = CORB.Int THEN term(y); CheckInt(y); CORG.AddOp(op, x, y)
      ELSIF x.type.form = CORB.Real THEN term(y); CheckReal(y); CORG.RealOp(op, x, y)
      ELSE CheckSet(x); term(y); CheckSet(y); CORG.SetOp(op, x, y)
      END
    END
  END SimpleExpression;

  PROCEDURE expression0(VAR x: CORG.Item);
    VAR y: CORG.Item; obj: CORB.Object; rel, xf, yf: INTEGER;
  BEGIN SimpleExpression(x);
    IF (sym >= ORS.eql) & (sym <= ORS.geq) THEN
      rel := sym; ORS.Get(sym); SimpleExpression(y); xf := x.type.form; yf := y.type.form;
      IF x.type = y.type THEN
        IF (xf IN {CORB.Char, CORB.Int}) THEN CORG.IntRelation(rel, x, y)
        ELSIF xf = CORB.Real THEN CORG.RealRelation(rel, x, y)
        ELSIF (xf IN {CORB.Set, CORB.Pointer, CORB.Proc, CORB.NilTyp, CORB.Bool}) THEN
          IF rel <= ORS.neq THEN CORG.IntRelation(rel, x, y) ELSE ORS.Mark("only = or #") END
        ELSIF (xf = CORB.Array) & (x.type.base.form = CORB.Char) OR (xf = CORB.String) THEN
          CORG.StringRelation(rel, x, y)
        ELSE ORS.Mark("illegal comparison")
        END
      ELSIF (xf IN {CORB.Pointer, CORB.Proc}) & (yf = CORB.NilTyp)
          OR (yf IN {CORB.Pointer, CORB.Proc}) & (xf = CORB.NilTyp) THEN
        IF rel <= ORS.neq THEN CORG.IntRelation(rel, x,  y) ELSE ORS.Mark("only = or #") END
      ELSIF (xf = CORB.Pointer) & (yf = CORB.Pointer) &
          (IsExtension(x.type.base, y.type.base) OR IsExtension(y.type.base, x.type.base))
          OR (xf = CORB.Proc) & (yf = CORB.Proc) & EqualSignatures(x.type, y.type) THEN
        IF rel <= ORS.neq THEN CORG.IntRelation(rel,  x, y) ELSE ORS.Mark("only = or #") END
      ELSIF (xf = CORB.Array) & (x.type.base.form = CORB.Char) &
            ((yf = CORB.String) OR (yf = CORB.Array) & (y.type.base.form = CORB.Char))
          OR (yf = CORB.Array) & (y.type.base.form = CORB.Char) & (xf = CORB.String) THEN
        CORG.StringRelation(rel, x, y)
      ELSIF (xf = CORB.Char) & (yf = CORB.String) & (y.b = 2) THEN
        CORG.StrToChar(y); CORG.IntRelation(rel, x, y)
      ELSIF (yf = CORB.Char) & (xf = CORB.String) & (x.b = 2) THEN
        CORG.StrToChar(x); CORG.IntRelation(rel, x, y)
      ELSIF (xf = CORB.Int) & (yf = CORB.Int) THEN CORG.IntRelation(rel,  x, y)  (*BYTE*)
      ELSE ORS.Mark("illegal comparison")
      END ;
      x.type := CORB.boolType
    ELSIF sym = ORS.in THEN
      ORS.Get(sym); CheckInt(x); SimpleExpression(y); CheckSet(y); CORG.In(x, y) ;
      x.type := CORB.boolType
    ELSIF sym = ORS.is THEN
      ORS.Get(sym); qualident(obj); TypeTest(x, obj.type, FALSE) ;
      x.type := CORB.boolType
    END
  END expression0;

  (* statements *)

  PROCEDURE StandProc(pno: LONGINT);
    VAR nap, npar: LONGINT; (*nof actual/formal parameters*)
      x, y, z: CORG.Item;
  BEGIN Check(ORS.lparen, "no (");
    npar := pno MOD 10; pno := pno DIV 10; expression(x); nap := 1;
    IF sym = ORS.comma THEN
      ORS.Get(sym); expression(y); nap := 2; z.type := CORB.noType;
      WHILE sym = ORS.comma DO ORS.Get(sym); expression(z); INC(nap) END
    ELSE y.type := CORB.noType
    END ;
    Check(ORS.rparen, "no )");
    IF (npar = nap) OR (pno IN {0, 1, 5}) THEN
      IF pno IN {0, 1} THEN (*INC, DEC*)
        CheckInt(x); CheckReadOnly(x);
        IF y.type # CORB.noType THEN CheckInt(y) END ;
        CORG.Increment(pno, x, y)
      ELSIF pno IN {2, 3} THEN (*INCL, EXCL*)
        CheckSet(x); CheckReadOnly(x); CheckInt(y); CORG.Include(pno-2, x, y)
      ELSIF pno = 4 THEN CheckBool(x); CORG.Assert(x)
      ELSIF pno = 5 THEN(*NEW*) CheckReadOnly(x);
        IF (x.type.form = CORB.Pointer) & (x.type.base.form IN {CORB.Record, CORB.Array}) THEN
          IF nap = 1 THEN
            IF x.type.base.form = CORB.Array THEN
              IF x.type.base.len >= 0 THEN CORG.MakeConstItem(y, CORB.intType, x.type.base.len)
              ELSE ORS.Mark("wrong nof params")
              END
            END
          ELSIF (nap = 2) & (x.type.base.form = CORB.Array) & (x.type.base.len < 0) THEN CheckInt(y) (*open array*)
          ELSE ORS.Mark("wrong nof params")
          END ;
          CORG.New(x, y)
        ELSE ORS.Mark("not a pointer to record or open array")
        END
      ELSIF pno = 6 THEN CheckReal(x); CheckInt(y); CheckReadOnly(x); CORG.Pack(x, y)
      ELSIF pno = 7 THEN CheckReal(x); CheckInt(y); CheckReadOnly(x); CORG.Unpk(x, y)
      ELSIF pno = 8 THEN
        IF x.type.form <= CORB.Set THEN CORG.Led(x) ELSE ORS.Mark("bad type") END
      ELSIF pno = 10 THEN CheckInt(x); CORG.Get(x, y)
      ELSIF pno = 11 THEN CheckInt(x); CORG.Put(x, y)
      ELSIF pno = 12 THEN CheckInt(x); CheckInt(y); CheckInt(z); CORG.Copy(x, y, z)
      ELSIF pno = 14 THEN CheckInt(x); CORG.LDREG(x, y)
      ELSIF pno = 21 THEN CheckInt(x); CORG.GETPSW(x)
      ELSIF pno = 22 THEN CheckInt(x); CORG.SETPSW(x)
      ELSIF pno = 23 THEN CheckConst(x); CheckInt(x); CORG.CCTL(x)
      END
    ELSE ORS.Mark("wrong nof parameters")
    END
  END StandProc;

  PROCEDURE StatSequence;
    VAR obj: CORB.Object;
      x, y, z, w: CORG.Item;
      L0, L1, rx: LONGINT;

    PROCEDURE TypeCase(obj: CORB.Object; VAR L0: LONGINT);
      VAR typobj: CORB.Object; x: CORG.Item;
        orgtype: CORB.Type;  (*original type of case var*)
    BEGIN
      IF sym = ORS.ident THEN
        qualident(typobj); CORG.MakeItem(x, obj, level); orgtype := obj.type;
        IF typobj.class # CORB.Typ THEN ORS.Mark("not a type") END ;
        TypeTest(x, typobj.type, FALSE); obj.type := typobj.type;
        CORG.CFJump(x); Check(ORS.colon, ": expected"); StatSequence;
        CORG.FJump(L0); CORG.Fixup(x); obj.type := orgtype
      ELSE ORS.Mark("type id expected"); Check(ORS.colon, ": expected"); StatSequence
      END
    END TypeCase;

    PROCEDURE TypeCasePart;
      VAR obj: CORB.Object; L0: LONGINT;
    BEGIN qualident(obj); Check(ORS.of, "OF expected"); L0 := 0;
      WHILE (sym < ORS.end) OR (sym = ORS.bar) DO
        IF sym = ORS.bar THEN ORS.Get(sym) ELSE TypeCase(obj, L0) END
      END ;
      IF sym = ORS.else THEN ORS.Get(sym); StatSequence END ;
      CORG.FixLink(L0)
    END TypeCasePart;

    PROCEDURE CaseLabel(VAR x: CORG.Item);
    BEGIN expression(x); CheckConst(x);
      IF (x.type.form = CORB.String) & (x.b = 2) THEN CORG.StrToChar(x)
      ELSIF ~(x.type.form IN {CORB.Int, CORB.Char}) OR (x.a < 0) OR (x.a > 255) THEN
        ORS.Mark("invalid case label"); x.type := CORB.intType
      END
    END CaseLabel;

    PROCEDURE NumericCase(LabelForm: INTEGER; VAR n: INTEGER; VAR tab: ARRAY OF CORG.LabelRange);
      VAR x, y: CORG.Item; i: INTEGER; continue: BOOLEAN;
    BEGIN
      REPEAT CaseLabel(x);
        IF x.type.form # LabelForm THEN ORS.Mark("invalid label form") END ;
        IF sym = ORS.upto THEN ORS.Get(sym); CaseLabel(y);
          IF (x.type.form # y.type.form) OR (x.a >= y.a) THEN ORS.Mark("invalid label range"); y := x END
        ELSE y := x
        END ;
        IF n < NofCases THEN  (*enter label range into ordered table*)
          i := n; continue := TRUE;
          WHILE continue & (i > 0) DO
            IF tab[i-1].low > y.a THEN tab[i] := tab[i-1]; DEC(i)
            ELSE continue := FALSE;
              IF tab[i-1].high >= x.a THEN ORS.Mark("overlapping case labels") END
            END
          END ;
          tab[i].low := x.a; tab[i].high := y.a; tab[i].label := CORG.Here(); INC(n)
        ELSE ORS.Mark("too many case labels")
        END ;
        IF sym = ORS.comma THEN ORS.Get(sym)
        ELSIF (sym < ORS.comma) OR (sym = ORS.semicolon) THEN ORS.Mark("comma?")
        END
      UNTIL (sym > ORS.comma) & (sym # ORS.semicolon);
      Check(ORS.colon, ": expected"); StatSequence
    END NumericCase;

    PROCEDURE NumericCasePart;
      VAR x: CORG.Item; L0, L1, L2: LONGINT; n, labelform: INTEGER;
        tab: ARRAY NofCases OF CORG.LabelRange;  (*ordered table of label ranges*)
    BEGIN expression(x); CheckCaseExpr(x); CORG.CaseHead(x, L0);
      Check(ORS.of, "OF expected"); n := 0; L2 := 0; labelform := x.type.form;
      WHILE (sym < ORS.end) OR (sym = ORS.bar) DO
        IF sym = ORS.bar THEN ORS.Get(sym) ELSE NumericCase(labelform, n, tab); CORG.FJump(L2) END
      END ;
      IF sym = ORS.else THEN ORS.Get(sym); L1 := CORG.Here(); StatSequence; CORG.FJump(L2) ELSE L1 := 0 END ;
      CORG.CaseTail(L0, L1, n, tab); CORG.FixLink(L2)
    END NumericCasePart;

  BEGIN (* StatSequence *)
    REPEAT (*sync*) obj := NIL;
      IF ~((sym >= ORS.ident) & (sym <= ORS.for) OR (sym >= ORS.semicolon)) THEN
        ORS.Mark("statement expected");
        REPEAT ORS.Get(sym) UNTIL sym >= ORS.ident
      END ;
      IF sym = ORS.ident THEN
        qualident(obj); CORG.MakeItem(x, obj, level);
        IF x.mode = CORB.SProc THEN StandProc(obj.val)
        ELSE selector(x);
          IF sym = ORS.becomes THEN (*assignment*)
            ORS.Get(sym); CheckReadOnly(x); expression(y);
            IF CompTypes(x.type, y.type, FALSE) THEN
              IF (x.type.form <= CORB.Pointer) OR (x.type.form = CORB.Proc) THEN CORG.Store(x, y)
              ELSE CORG.StoreStruct(x, y)
              END
            ELSIF (x.type.form = CORB.Array) & (y.type.form = CORB.Array) & (x.type.base = y.type.base) THEN
              CORG.StoreStruct(x, y)
            ELSIF (x.type.form = CORB.Array) & (x.type.base.form = CORB.Char) & (y.type.form = CORB.String) THEN
              CORG.CopyString(x, y)
            ELSIF (x.type.form = CORB.Int) & (y.type.form = CORB.Int) THEN CORG.Store(x, y)  (*BYTE*)
            ELSIF (x.type.form = CORB.Char) & (y.type.form = CORB.String) & (y.b = 2) THEN
              CORG.StrToChar(y); CORG.Store(x, y)
            ELSE ORS.Mark("illegal assignment")
            END
          ELSIF sym = ORS.eql THEN ORS.Mark("should be :="); ORS.Get(sym); expression(y)
          ELSIF sym = ORS.lparen THEN (*procedure call*)
            ORS.Get(sym);
            IF (x.type.form IN {CORB.Proc, CORB.TProc}) & (x.type.base.form = CORB.NoTyp) THEN
              CORG.PrepCall(x, rx); ParamList(x); CORG.Call(x, rx)
            ELSE ORS.Mark("not a procedure"); ParamList(x)
            END
          ELSIF x.type.form = CORB.Proc THEN (*procedure call without parameters*)
            IF x.type.nofpar > 0 THEN ORS.Mark("missing parameters") END ;
            IF x.type.base.form = CORB.NoTyp THEN CORG.PrepCall(x, rx); CORG.Call(x, rx) ELSE ORS.Mark("not a procedure") END
          ELSIF x.mode = CORB.Typ THEN ORS.Mark("illegal assignment")
          ELSE ORS.Mark("not a procedure")
          END
        END
      ELSIF sym = ORS.if THEN
        ORS.Get(sym); expression(x); CheckBool(x); CORG.CFJump(x);
        Check(ORS.then, "no THEN");
        StatSequence; L0 := 0;
        WHILE sym = ORS.elsif DO
          ORS.Get(sym); CORG.FJump(L0); CORG.Fixup(x); expression(x); CheckBool(x);
          CORG.CFJump(x); Check(ORS.then, "no THEN"); StatSequence
        END ;
        IF sym = ORS.else THEN ORS.Get(sym); CORG.FJump(L0); CORG.Fixup(x); StatSequence
        ELSE CORG.Fixup(x)
        END ;
        CORG.FixLink(L0); Check(ORS.end, "no END")
      ELSIF sym = ORS.while THEN
        ORS.Get(sym); L0 := CORG.Here(); expression(x); CheckBool(x); CORG.CFJump(x);
        Check(ORS.do, "no DO"); StatSequence; CORG.BJump(L0);
        WHILE sym = ORS.elsif DO
          ORS.Get(sym); CORG.Fixup(x); expression(x); CheckBool(x); CORG.CFJump(x);
          Check(ORS.do, "no DO"); StatSequence; CORG.BJump(L0)
        END ;
        CORG.Fixup(x); Check(ORS.end, "no END")
      ELSIF sym = ORS.repeat THEN
        ORS.Get(sym); L0 := CORG.Here(); StatSequence;
        IF sym = ORS.until THEN
          ORS.Get(sym); expression(x); CheckBool(x); CORG.CBJump(x, L0)
        ELSE ORS.Mark("missing UNTIL")
        END
      ELSIF sym = ORS.for THEN
        ORS.Get(sym);
        IF sym = ORS.ident THEN
          qualident(obj); CORG.MakeItem(x, obj, level); CheckInt(x); CheckReadOnly(x);
          IF sym = ORS.becomes THEN
            ORS.Get(sym); expression(y); CheckInt(y); CORG.For0(x, y); L0 := CORG.Here();
            Check(ORS.to, "no TO"); expression(z); CheckInt(z); obj.rdo := TRUE;
            IF sym = ORS.by THEN ORS.Get(sym); expression(w); CheckConst(w); CheckInt(w)
            ELSE CORG.MakeConstItem(w, CORB.intType, 1)
            END ;
            Check(ORS.do, "no DO"); CORG.For1(x, y, z, w, L1);
            StatSequence; Check(ORS.end, "no END");
            CORG.For2(x, y, w); CORG.BJump(L0); CORG.FixLink(L1); obj.rdo := FALSE
          ELSE ORS.Mark(":= expected")
          END
        ELSE ORS.Mark("identifier expected")
        END
      ELSIF sym = ORS.case THEN
        ORS.Get(sym);
        IF sym = ORS.ident THEN obj := CORB.thisObj() END ;
        IF (obj # NIL) & (obj.type # NIL) &
          ((obj.type.form = CORB.Pointer) OR (obj.type.form = CORB.Record) & (obj.class = CORB.Par)) THEN TypeCasePart
        ELSE NumericCasePart
        END ;
        Check(ORS.end, "no END")
      END ;
      CORG.CheckRegs;
      IF sym = ORS.semicolon THEN ORS.Get(sym)
      ELSIF sym < ORS.semicolon THEN ORS.Mark("missing semicolon?")
      END
    UNTIL sym > ORS.semicolon
  END StatSequence;

  (* Types and declarations *)

  PROCEDURE IdentList(class: INTEGER; VAR first: CORB.Object);
    VAR obj: CORB.Object;
  BEGIN
    IF sym = ORS.ident THEN
      CORB.NewObj(first, ORS.id, class); ORS.Get(sym); CheckExport(first.expo);
      WHILE sym = ORS.comma DO
        ORS.Get(sym);
        IF sym = ORS.ident THEN CORB.NewObj(obj, ORS.id, class); ORS.Get(sym); CheckExport(obj.expo)
        ELSE ORS.Mark("ident?")
        END
      END;
      IF sym = ORS.colon THEN ORS.Get(sym) ELSE ORS.Mark(":?") END
    ELSE first := NIL
    END
  END IdentList;
  
  PROCEDURE ArrayType(VAR type: CORB.Type);
    VAR x: CORG.Item; typ: CORB.Type; len: LONGINT;
  BEGIN NEW(typ); typ.form := CORB.NoTyp;
    IF sym = ORS.of THEN (*open array type*)
      ORS.Get(sym); Type(typ.base); typ.len := -1; typ.size := 0;
      IF typ.base.form = CORB.Array THEN ORS.Mark("multi-dimensional open arrays not allowed") END
    ELSE expression(x);
      IF (x.mode = CORB.Const) & (x.type.form = CORB.Int) & (x.a >= 0) THEN len := x.a
      ELSE len := 1; ORS.Mark("not a valid length")
      END ;
      IF sym = ORS.of THEN ORS.Get(sym); Type(typ.base);
        IF (typ.base.form = CORB.Array) & (typ.base.len < 0) THEN ORS.Mark("dyn array not allowed") END
      ELSIF sym = ORS.comma THEN ORS.Get(sym); ArrayType(typ.base)
      ELSE ORS.Mark("missing OF"); typ.base := CORB.intType
      END ;
      typ.size := (len * typ.base.size + 3) DIV 4 * 4; typ.len := len
    END ;
    typ.form := CORB.Array; type := typ
  END ArrayType;

  PROCEDURE RecordType(VAR type: CORB.Type);
    VAR obj, obj0, new, bot, base: CORB.Object;
      typ, tp: CORB.Type;
      offset, off, n: LONGINT;
  BEGIN NEW(typ); typ.form := CORB.NoTyp; typ.base := NIL; typ.mno := -level; typ.nofpar := 0; typ.len := 0; offset := 0; bot := NIL;
    IF sym = ORS.lparen THEN
      ORS.Get(sym); (*record extension*)
      IF level # 0 THEN ORS.Mark("extension of local types not implemented") END ;
      IF sym = ORS.ident THEN
        qualident(base);
        IF base.class = CORB.Typ THEN
          IF base.type.form = CORB.Record THEN typ.base := base.type
          ELSE typ.base := CORB.intType; ORS.Mark("invalid extension")
          END ;
          typ.nofpar := typ.base.nofpar + 1; (*"nofpar" here abused for extension level*)
          bot := typ.base.dsc; offset := typ.base.size
        ELSE ORS.Mark("type expected")
        END
      ELSE ORS.Mark("ident expected")
      END ;
      Check(ORS.rparen, "no )")
    END ;
    WHILE sym = ORS.ident DO  (*fields*)
      n := 0; obj := bot;
      WHILE sym = ORS.ident DO
        obj0 := obj;
        WHILE (obj0 # NIL) & (obj0.name # ORS.id) DO obj0 := obj0.next END ;
        IF obj0 # NIL THEN ORS.Mark("mult def") END ;
        NEW(new); ORS.CopyId(new.name); new.class := CORB.Fld; new.next := obj; obj := new; INC(n);
        ORS.Get(sym); CheckExport(new.expo);
        IF (sym # ORS.comma) & (sym # ORS.colon) THEN ORS.Mark("comma expected")
        ELSIF sym = ORS.comma THEN ORS.Get(sym)
        END
      END ;
      Check(ORS.colon, "colon expected"); Type(tp);
      IF (tp.form = CORB.Array) & (tp.len < 0) THEN ORS.Mark("dyn array not allowed") END ;
      IF tp.size > 1 THEN offset := (offset+3) DIV 4 * 4 END ;
      offset := offset + n * tp.size; off := offset; obj0 := obj;
      WHILE obj0 # bot DO obj0.type := tp; obj0.lev := 0; off := off - tp.size; obj0.val := off; obj0 := obj0.next END ;
      bot := obj;
      IF sym = ORS.semicolon THEN ORS.Get(sym) ELSIF sym # ORS.end THEN ORS.Mark(" ; or END") END
    END ;
    typ.form := CORB.Record; typ.dsc := bot; typ.size := (offset + 3) DIV 4 * 4; type := typ
  END RecordType;

  PROCEDURE FPSection(VAR adr: LONGINT; VAR nofpar: INTEGER);
    VAR obj, first: CORB.Object; tp: CORB.Type;
      parsize: LONGINT; cl: INTEGER; rdo: BOOLEAN;
  BEGIN
    IF sym = ORS.var THEN ORS.Get(sym); cl := CORB.Par ELSE cl := CORB.Var END ;
    IdentList(cl, first); FormalType(tp, 0); rdo := FALSE;
    IF (cl = CORB.Var) & (tp.form >= CORB.Array) THEN cl := CORB.Par; rdo := TRUE END ;
    IF (tp.form = CORB.Array) & (tp.len < 0) OR (tp.form = CORB.Record) THEN
      parsize := 2*CORG.WordSize  (*open array or record, needs second word for length or type tag*)
    ELSE parsize := CORG.WordSize
    END ;
    obj := first;
    WHILE obj # NIL DO
      INC(nofpar); obj.class := cl; obj.type := tp; obj.rdo := rdo; obj.lev := level; obj.val := adr;
      adr := adr + parsize; obj := obj.next
    END ;
    IF adr >= 52 THEN ORS.Mark("too many parameters") END
  END FPSection;

  PROCEDURE ProcedureType(ptype: CORB.Type; VAR parblksize: LONGINT);
    VAR obj: CORB.Object; size: LONGINT; nofpar: INTEGER;
  BEGIN ptype.base := CORB.noType; size := parblksize; nofpar := 0; ptype.dsc := NIL;
    IF sym = ORS.lparen THEN
      ORS.Get(sym);
      IF sym = ORS.rparen THEN ORS.Get(sym)
      ELSE FPSection(size, nofpar);
        WHILE sym = ORS.semicolon DO ORS.Get(sym); FPSection(size, nofpar) END ;
        Check(ORS.rparen, "no )")
      END ;
      IF sym = ORS.colon THEN  (*function*)
        ORS.Get(sym);
        IF sym = ORS.ident THEN
          qualident(obj); ptype.base := obj.type;
          IF ~((obj.class = CORB.Typ) & (obj.type.form IN {CORB.Byte .. CORB.Pointer, CORB.Proc})) THEN
            ORS.Mark("illegal function type")
          END
        ELSE ORS.Mark("type identifier expected")
        END
      END
    END ;
    ptype.nofpar := nofpar; parblksize := size
  END ProcedureType;

  PROCEDURE FormalType0(VAR typ: CORB.Type; dim: INTEGER);
    VAR obj: CORB.Object; dmy: LONGINT;
  BEGIN
    IF sym = ORS.ident THEN
      qualident(obj);
      IF obj.class = CORB.Typ THEN typ := obj.type ELSE ORS.Mark("not a type"); typ := CORB.intType END
    ELSIF sym = ORS.array THEN
      ORS.Get(sym); Check(ORS.of, "OF ?");
      IF dim >= 1 THEN ORS.Mark("multi-dimensional open arrays not implemented") END ;
      NEW(typ); typ.form := CORB.Array; typ.len := -1; typ.size := 2*CORG.WordSize; 
      FormalType(typ.base, dim+1)
    ELSIF sym = ORS.procedure THEN
      ORS.Get(sym); CORB.OpenScope;
      NEW(typ); typ.form := CORB.Proc; typ.size := CORG.WordSize; dmy := 0; ProcedureType(typ, dmy);
      typ.dsc := CORB.topScope.next; CORB.CloseScope
    ELSE ORS.Mark("identifier expected"); typ := CORB.noType
    END
  END FormalType0;

  PROCEDURE CheckRecLevel(lev: INTEGER);
  BEGIN
    IF lev # 0 THEN ORS.Mark("ptr base must be global") END
  END CheckRecLevel;

  PROCEDURE Type0(VAR type: CORB.Type);
    VAR dmy: LONGINT; obj: CORB.Object; ptbase: PtrBase;
  BEGIN type := CORB.intType; (*sync*)
    IF (sym # ORS.ident) & (sym < ORS.array) THEN ORS.Mark("not a type");
      REPEAT ORS.Get(sym) UNTIL (sym = ORS.ident) OR (sym >= ORS.array)
    END ;
    IF sym = ORS.ident THEN
      qualident(obj);
      IF obj.class = CORB.Typ THEN
        IF (obj.type # NIL) & (obj.type.form # CORB.NoTyp) THEN type := obj.type END
      ELSE ORS.Mark("not a type or undefined")
      END
    ELSIF sym = ORS.array THEN ORS.Get(sym); ArrayType(type)
    ELSIF sym = ORS.record THEN
      ORS.Get(sym); RecordType(type); Check(ORS.end, "no END")
    ELSIF sym = ORS.pointer THEN
      ORS.Get(sym); Check(ORS.to, "no TO");
      NEW(type);  type.form := CORB.Pointer; type.size := CORG.WordSize; type.base := CORB.intType;
      IF sym = ORS.ident THEN
        obj := CORB.thisObj();
        IF obj # NIL THEN
          IF (obj.class = CORB.Typ) & (obj.type.form IN {CORB.Record, CORB.NoTyp, CORB.Array}) THEN
            CheckRecLevel(obj.lev); type.base := obj.type
          ELSIF obj.class = CORB.Mod THEN ORS.Mark("external base type not implemented")
          ELSE ORS.Mark("no valid base type")
          END
        ELSE CheckRecLevel(level); (*enter into list of forward references to be fixed in Declarations*)
          NEW(ptbase); ORS.CopyId(ptbase.name); ptbase.type := type; ptbase.next := pbsList; pbsList := ptbase
        END ;
        ORS.Get(sym)
      ELSE Type(type.base);
        IF ~(type.base.form IN {CORB.Record, CORB.Array}) OR (type.base.typobj = NIL) THEN
          ORS.Mark("must point to named record or array")
        END ;
        CheckRecLevel(level)
      END
    ELSIF sym = ORS.procedure THEN
      ORS.Get(sym); CORB.OpenScope;
      NEW(type); type.form := CORB.Proc; type.size := CORG.WordSize; dmy := 0;
      ProcedureType(type, dmy); type.dsc := CORB.topScope.next; CORB.CloseScope
    ELSE ORS.Mark("illegal type")
    END
  END Type0;

  PROCEDURE Declarations(VAR varsize: LONGINT);
    VAR obj, first: CORB.Object;
      x: CORG.Item; tp: CORB.Type; ptbase: PtrBase;
      expo: BOOLEAN; id: ORS.Ident;
  BEGIN (*sync*) pbsList := NIL;
    IF (sym < ORS.const) & (sym # ORS.end) & (sym # ORS.return) THEN ORS.Mark("declaration?");
      REPEAT ORS.Get(sym) UNTIL (sym >= ORS.const) OR (sym = ORS.end) OR (sym = ORS.return)
    END ;
    IF sym = ORS.const THEN
      ORS.Get(sym);
      WHILE sym = ORS.ident DO
        ORS.CopyId(id); ORS.Get(sym); CheckExport(expo);
        IF sym = ORS.eql THEN ORS.Get(sym) ELSE ORS.Mark("= ?") END;
        expression(x);
        IF (x.type.form = CORB.String) & (x.b = 2) THEN CORG.StrToChar(x) END ;
        CORB.NewObj(obj, id, CORB.Const); obj.expo := expo; obj.lev := level;
        IF x.mode = CORB.Const THEN obj.type := x.type;
          IF expo & (obj.type.form = CORB.String) THEN obj.exno := exno; INC(exno) ELSE obj.exno := 0 END ;
          IF obj.type.form = CORB.String THEN obj.val := x.a (*strx*) + x.b (*len*) * C20 ELSE obj.val := x.a END
        ELSE ORS.Mark("expression not constant"); obj.type := CORB.intType
        END;
        Check(ORS.semicolon, "; missing")
      END
    END ;
    IF sym = ORS.type THEN
      ORS.Get(sym);
      WHILE sym = ORS.ident DO
        ORS.CopyId(id); ORS.Get(sym); CheckExport(expo);
        IF sym = ORS.eql THEN ORS.Get(sym) ELSE ORS.Mark("=?") END ;
        Type(tp);
        CORB.NewObj(obj, id, CORB.Typ); obj.type := tp; obj.expo := expo; obj.lev := level;
        IF tp.typobj = NIL THEN tp.typobj := obj END ;
        IF expo & (obj.type.form = CORB.Record) THEN obj.exno := exno; INC(exno) ELSE obj.exno := 0 END ;
        IF tp.form IN {CORB.Record, CORB.Array} THEN
          ptbase := pbsList;  (*check whether this is base of a pointer type; search and fixup*)
          WHILE ptbase # NIL DO
            IF obj.name = ptbase.name THEN ptbase.type.base := obj.type END ;
            ptbase := ptbase.next
          END
        END ;
        Check(ORS.semicolon, "; missing")
      END
    END ;
    IF sym = ORS.var THEN
      ORS.Get(sym);
      WHILE sym = ORS.ident DO
        IdentList(CORB.Var, first); Type(tp);
        IF (tp.form = CORB.Array) & (tp.len < 0) THEN ORS.Mark("open array not allowed") END ;
        obj := first;
        WHILE obj # NIL DO
          obj.type := tp; obj.lev := level;
          IF tp.size > 1 THEN varsize := (varsize + 3) DIV 4 * 4 (*align*) END ;
          obj.val := varsize; varsize := varsize + obj.type.size;
          IF obj.expo THEN obj.exno := exno; INC(exno) END ;
          obj := obj.next
        END ;
        Check(ORS.semicolon, "; missing")
      END
    END ;
    varsize := (varsize + 3) DIV 4 * 4;
    ptbase := pbsList;
    WHILE ptbase # NIL DO
      IF ptbase.type.base.form = CORB.Int THEN ORS.Mark("undefined pointer base of") END ;
      ptbase := ptbase.next
    END ;
    IF (sym >= ORS.const) & (sym <= ORS.var) THEN ORS.Mark("declaration in bad order") END
  END Declarations;

  PROCEDURE Receiver(VAR class: INTEGER; VAR name: ORS.Ident; VAR typ, rec: CORB.Type);
    VAR obj: CORB.Object;
  BEGIN rec := NIL;
    IF sym = ORS.var THEN ORS.Get(sym); class := CORB.Par ELSE class := CORB.Var END ;
    IF sym = ORS.ident THEN ORS.CopyId(name); ORS.Get(sym) ELSE ORS.Mark("ident?") END ;
    Check(ORS.colon, ": expected");
    IF sym = ORS.ident THEN
      qualident(obj);
      IF obj.class = CORB.Typ THEN typ := obj.type;
        IF (class = CORB.Par) & (typ.form = CORB.Record) OR
          (class = CORB.Var) & (typ.form = CORB.Pointer) & (typ.base.form = CORB.Record) THEN
          IF typ.form = CORB.Pointer THEN rec := typ.base ELSE rec := typ END ;
          IF rec.mno # -level THEN ORS.Mark("must be bound to record of same scope"); rec := NIL END
        ELSE ORS.Mark("invalid receiver type")
        END
      ELSE ORS.Mark("receiver type expected")
      END
    ELSE ORS.Mark("type identifier expected")
    END ;
    Check(ORS.rparen, "no )")
  END Receiver;

  PROCEDURE ProcedureDecl;
    VAR proc, redef, obj: CORB.Object;
      type, typ, rec: CORB.Type;
      procid, recid: ORS.Ident;
      parblksize: LONGINT; class: INTEGER;
      int, expo: BOOLEAN;

    PROCEDURE Body(proc: CORB.Object; parblksize: LONGINT; int: BOOLEAN);
      VAR x: CORG.Item; locblksize: LONGINT;
    BEGIN Check(ORS.semicolon, "no ;"); locblksize := parblksize;
      Declarations(locblksize); proc.type.dsc := CORB.topScope.next;
      WHILE sym = ORS.procedure DO ProcedureDecl; Check(ORS.semicolon, "no ;") END ;
      CORG.FixLink(proc.type.len);  (*fix forward references generated in CORG*)
      proc.val := CORG.Here() * 4; proc.type.dsc := CORB.topScope.next;
      CORG.Enter(parblksize, locblksize, int);
      IF sym = ORS.begin THEN ORS.Get(sym); StatSequence END ;
      IF sym = ORS.return THEN
        ORS.Get(sym); expression(x);
        IF proc.type.base = CORB.noType THEN ORS.Mark("this is not a function")
        ELSIF ~CompTypes(proc.type.base, x.type, FALSE) THEN ORS.Mark("wrong result type")
        END
      ELSIF proc.type.base.form # CORB.NoTyp THEN
        ORS.Mark("function without result"); proc.type.base := CORB.noType
      END ;
      CORG.Return(proc.type.base.form, x, locblksize, int); Check(ORS.end, "no END");
      IF sym = ORS.ident THEN
        IF ORS.id # proc.name THEN ORS.Mark("no match") END ;
        ORS.Get(sym)
      ELSE ORS.Mark("no proc id")
      END
    END Body;

  BEGIN (* ProcedureDecl *) int := FALSE; rec := NIL; ORS.Get(sym);
    IF sym = ORS.times THEN ORS.Get(sym); int := TRUE END ;
    IF sym = ORS.lparen THEN
      ORS.Get(sym); Receiver(class, recid, typ, rec);
      IF level # 0 THEN ORS.Mark("local type-bound procedures not implemented") END
    END ;
    IF sym = ORS.ident THEN
      ORS.CopyId(procid); ORS.Get(sym); CheckExport(expo);
      IF int THEN parblksize := 12 ELSE parblksize := 4 END ;
      NEW(type); type.size := CORG.WordSize; type.len := 0; (*len used as heading of fixup chain of forward refs*)
      IF rec = NIL THEN  (*regular procedure*)
        CORB.NewObj(proc, procid, CORB.Const);
        type.form := CORB.Proc; proc.type := type; proc.val := -1; proc.lev := level; proc.expo := expo;
        IF expo THEN proc.exno := exno; INC(exno) END ;
        CORB.OpenScope; INC(level); type.base := CORB.noType;
        ProcedureType(type, parblksize); type.dsc := CORB.topScope.next  (*formal parameter list*)
      ELSE  (*type-bound procedure*)
        CORB.NewMethod(rec, proc, redef, procid);
        IF rec.typobj.val > 0 THEN ORS.Mark("invalid method order") ELSE DisallowMethods(rec.base) END ;
        type.form := CORB.TProc; proc.type := type; proc.val := -1; proc.expo := expo;
        IF expo THEN proc.exno := exno; INC(exno);
          IF ~typ.typobj.expo THEN ORS.Mark("receiver must be exported") END ;
          procid := "@"; CORB.NewObj(obj, procid, CORB.Const); obj.name[0] := 0X; (*dummy to preserve linear order of exno*)
          obj.type := proc.type; obj.dsc := proc; obj.exno := proc.exno; obj.expo := FALSE
        END ;
        CORB.OpenScope; INC(level); type.base := CORB.noType;
        CORB.NewObj(obj, recid, class);  (*insert receiver as first parameter*)
        obj.type := typ; obj.rdo := FALSE; obj.lev := level; obj.val := parblksize;
        IF typ.form = CORB.Record THEN INC(parblksize, 2*CORG.WordSize) ELSE INC(parblksize, CORG.WordSize) END ;
        ProcedureType(type, parblksize); type.dsc := CORB.topScope.next; INC(type.nofpar);  (*formal parameter list*)
        IF redef # NIL THEN  (*redefined method found*)
          IF redef.expo & typ.typobj.expo & ~proc.expo THEN ORS.Mark("overriding method must be exported")
          ELSIF ~EqualSignatures(redef.type, proc.type) THEN ORS.Mark("must match redefined method")
          END
        END
      END ;
      Body(proc, parblksize, int); CORB.CloseScope; DEC(level)
    ELSE ORS.Mark("proc id expected")
    END
  END ProcedureDecl;

  PROCEDURE ImportList;
    VAR impid, impid1: ORS.Ident;
  BEGIN
    REPEAT ORS.Get(sym);
      IF sym = ORS.ident THEN
        ORS.CopyId(impid); ORS.Get(sym);
        IF sym = ORS.becomes THEN
          ORS.Get(sym);
          IF sym = ORS.ident THEN ORS.CopyId(impid1); ORS.Get(sym)
          ELSE ORS.Mark("id expected"); impid1 := impid
          END
        ELSE impid1 := impid
        END ;
        CORB.Import(impid, impid1)
      ELSE ORS.Mark("id expected")
      END
    UNTIL sym # ORS.comma
  END ImportList;

  PROCEDURE Module;
    VAR key: LONGINT;
  BEGIN Texts.WriteString(W, "  compiling "); ORS.Get(sym);
    IF sym = ORS.module THEN
      ORS.Get(sym);
      IF sym = ORS.times THEN version := 0; dc := 8; Texts.Write(W, "*"); ORS.Get(sym) ELSE dc := 0; version := 1 END ;
      CORB.Init; CORB.OpenScope;
      IF sym = ORS.ident THEN
        ORS.CopyId(modid); ORS.Get(sym);
        Texts.WriteString(W, modid); Texts.Append(Oberon.Log, W.buf)
      ELSE ORS.Mark("identifier expected")
      END ;
      Check(ORS.semicolon, "no ;"); level := 0; exno := 1; key := 0;
      IF sym = ORS.import THEN ImportList; Check(ORS.semicolon, "; missing") END ;
      CORG.Open(version); Declarations(dc); CORG.SetDataSize((dc + 3) DIV 4 * 4);
      WHILE sym = ORS.procedure DO ProcedureDecl; Check(ORS.semicolon, "no ;") END ;
      CORG.Header;
      IF sym = ORS.begin THEN ORS.Get(sym); StatSequence END ;
      Check(ORS.end, "no END");
      IF sym = ORS.ident THEN
        IF ORS.id # modid THEN ORS.Mark("no match") END ;
        ORS.Get(sym)
      ELSE ORS.Mark("identifier missing")
      END ;
      IF sym # ORS.period THEN ORS.Mark("period missing") END ;
      IF (ORS.errcnt = 0) & (version # 0) THEN
        CORB.Export(modid, newSF, key);
        IF newSF THEN Texts.WriteString(W, " new symbol file") END
      END ;
      IF ORS.errcnt = 0 THEN
        CORG.Close(modid, key, exno);
        Texts.WriteInt(W, CORG.pc, 6); Texts.WriteInt(W, dc, 6); Texts.WriteHex(W, key)
      ELSE Texts.WriteLn(W); Texts.WriteString(W, "compilation FAILED")
      END ;
      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf);
      CORB.CloseScope; pbsList := NIL
    ELSE ORS.Mark("must start with MODULE")
    END
  END Module;

  PROCEDURE Option(VAR S: Texts.Scanner);
  BEGIN newSF := FALSE;
    IF S.nextCh = "/" THEN
      Texts.Scan(S); Texts.Scan(S);
      IF (S.class = Texts.Name) & (S.s[0] = "s") THEN newSF := TRUE END
    END
  END Option;

  PROCEDURE Compile*;
    VAR beg, end, time: LONGINT;
      T: Texts.Text;
      S: Texts.Scanner;
  BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
    IF S.class = Texts.Char THEN
      IF S.c = "@" THEN
        Option(S); Oberon.GetSelection(T, beg, end, time);
        IF time >= 0 THEN ORS.Init(T, beg); Module END
      ELSIF S.c = "^" THEN
        Option(S); Oberon.GetSelection(T, beg, end, time);
        IF time >= 0 THEN
          Texts.OpenScanner(S, T, beg); Texts.Scan(S);
          IF S.class = Texts.Name THEN
            Texts.WriteString(W, S.s); NEW(T); Texts.Open(T, S.s);
            IF T.len > 0 THEN ORS.Init(T, 0); Module END
          END
        END
      END
    ELSE 
      WHILE S.class = Texts.Name DO
        NEW(T); Texts.Open(T, S.s);
        IF T.len > 0 THEN Option(S); ORS.Init(T, 0); Module
        ELSE Texts.WriteString(W, S.s); Texts.WriteString(W, " not found");
          Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
        END ;
        IF (T.len # 0) & (ORS.errcnt = 0) THEN Texts.Scan(S) ELSE S.class := 0 END
      END
    END ;
    Oberon.Collect(0)
  END Compile;

BEGIN Texts.OpenWriter(W); Texts.WriteString(W, "OR Compiler  8.3.2020 / AP 1.5.20");
  Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf);
  NEW(dummy); dummy.class := CORB.Var; dummy.type := CORB.intType;
  expression := expression0; Type := Type0; FormalType := FormalType0
END CORP.
