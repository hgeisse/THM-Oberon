MODULE CORG; (* N.Wirth, 16.4.2016 / 4.4.2017 / 31.5.2019  Oberon compiler; code generator for RISC / AP 1.5.20 Extended Oberon*)
  IMPORT SYSTEM, Files, ORS, CORB, Out, CrossUtil;
  (*Code generator for Oberon compiler for RISC processor.
     Procedural interface to Parser CORP; result in array "code".
     Procedure Close writes code-files*)

  CONST WordSize* = 4;
    StkOrg0 = 0C0010000H; VarOrg0 = 0;  (*for RISC-0 only*)
    TR = 28; SP = 29; LNK = 31;   (*dedicated registers*)
    maxRegister = 31;
    maxCode = 10000; maxStrx = 3500; maxTD = 160; maxSet = WordSize*8;
    Reg = 10; RegI = 11; Cond = 12;  (*internal item modes*)
    Zero = 0; D = 4B00H; (*denormalized zero with an exponent of 127 + 24 = 151, used for FLOOR/FLT conversions*)
    F2 = -2;  (*F2 memory instruction*)
    F3 = -3; BCT = 0A8000000H; RTI = 10H; STI = 20H;  (*F3 branch instructions*)
    C4 = 10H; C5 = 20H; C6 = 40H; C8 = 100H; C10 = 400H; C11 = 800H; C12 = 1000H; C14 = 4000H; C15 = 8000H; C16 = 10000H; C18 = 40000H; 
    C20 = 100000H; C21 = 200000H; C22 = 400000H; C24 = 1000000H; C26 = 4000000H; C28 = 10000000H; C30 = 40000000H; C31 = 80000000H;
    boardIOAddr = 0F1000000H;

  (*frequently used opcodes*)  U = 2000H; V = 1000H;
    Mov = 0; Lsl = 24; Slr = 26; Sar = 28; Ror= 3; And = 16; Ann = 5; Ior = 18; Xor = 20;
    Add = 0; Sub = 2; Cmp = 2; Mul = 4; Mulu = 6; Div = 8; Rem = 12; Remu = 14;
    Ldw = 48; Ldb = 52; Stw = 53; Stb = 55;

    Fpar = 59;
    Addf = 0; Subf = 1; Mulf = 2; Divf = 3; CF2I = 6; CI2F = 7;

    Rfx = 47; (* return from interrupt *)

    (* move from/to special register *)
    Mvfs = 56;
    Mvts = 57;

    (* cache control *)
    Cctl = 30;

    Fad = 12; Fsb = 13; Fml = 14; Fdv = 15;
    Ldr = 8; Str = 10; Ldhi = 30;
    Bc = 32; Bcf = 38; Br = 43; Blr = 45; Bl = 44; J = 42; (*ECO32 jump to offset*)
    EQ = 0; NE = 1; CS = 5; CC = 3; LT = 4; GE = 6; LE = 2; GT = 8; MI = LT; PL = GE; 
    EQF = 0; NEF = 1; LTF = 3; GEF = 4; LEF = 2; GTF = 5;

    TYPE Item* = RECORD
      mode*: INTEGER;
      type*: CORB.Type;
      a*, b*, r: LONGINT;
      rdo*: BOOLEAN  (*read only*)
    END ;
    LabelRange* = RECORD low*, high*, label*: INTEGER END ;

  (* Item forms and meaning of fields:
    mode    r      a       b
    --------------------------------
    Const   -     value (proc adr)  (immediate value)
    Var     base   off     -               (direct adr)
    Par      -     off0     off1         (indirect adr)
    Reg    regno
    RegI   regno   off     -
    Cond  cond   Fchain  Tchain  *)

  VAR pc*: LONGINT;    (*program counter*)
    varx, strx, tdw: LONGINT;  (*varx and strx in bytes, tdw in words*)
    entry: LONGINT;   (*main entry point*)
    RH: LONGINT;  (*available registers R[0] ... R[H-1]*)
    frame: LONGINT;  (*frame offset changed in SaveRegs and RestoreRegs*)
    currentParlbksize: LONGINT; (* size of the current parameterlist in words *)
    fixorgP, fixorgD, fixorgT, fixorgM: LONGINT;   (*origins of lists of locations to be fixed up by loader*)
    check: BOOLEAN;  (*emit run-time checks*)
    version: INTEGER;  (* 0 = RISC-0, 1 = RISC-5 *)

    relmap: ARRAY 6 OF INTEGER;  (*condition codes for relations*)
    negatedf: ARRAY 6 OF INTEGER; (*condition negation table for float comparison*)
    negated: ARRAY 16 OF INTEGER; (*condition negation table for int comparison*)
    code: ARRAY maxCode OF LONGINT;
    str: ARRAY maxStrx OF CHAR;  (*strings*)
    td: ARRAY maxTD OF LONGINT;  (*type descriptors*)

  (*instruction assemblers according to formats*)

  PROCEDURE incR;
  BEGIN
    IF RH < TR-1 THEN INC(RH) ELSE ORS.Mark("register stack overflow") END
  END incR;

  PROCEDURE Put0(op, a, b, c: LONGINT);
  BEGIN (*emit format-0 instruction*)
    code[pc] := (((op * 20H + b) * 20H + c) * 20H + a) * 800H;
    INC(pc)
  END Put0;

  PROCEDURE Put0a(op, a, b, c: LONGINT);
  BEGIN (* emit format-0 floating point instruction  *)
    code[pc] := (((Fpar * 20H + b) * 20H + c) * 20H + a) * 800H + op;
    INC(pc)
  END Put0a;

  PROCEDURE Put1(op, a, b, im: LONGINT);
  BEGIN (*emit format-1 instruction, -C16 <= im < C16*)
    (* ECO32 automatically extends the sign, no need to check *)
    code[pc] := ((((op + 1) * 20H + b) * 20H + a) * C16 + (im MOD C16));
    INC(pc)
  END Put1;

  PROCEDURE Put1a(op, a, b, im: LONGINT; isMove: BOOLEAN);
    VAR r: INTEGER;
  BEGIN (*same as Put1, but with range test -C16 <= im < C16*)
    (* TODO: check for every instruction if is signextended *)
    IF (im >= -C16) & (im < C15) THEN 
      Put1(op, a, b, im)
    ELSIF isMove THEN
      Put1(Ldhi, a, 0, im DIV C16 MOD C16);
      IF im MOD C16 # 0 THEN Put1(Ior, a, a, im MOD C16) END
    ELSE r := RH;
      IF b = RH THEN incR END ;
      Put1(Ldhi, RH, 0, im DIV C16 MOD C16);
      IF im MOD C16 # 0 THEN Put1(Ior, RH, RH, im MOD C16) END ;
      IF b # 0 THEN Put0(op, a, b, RH) END ;
      IF RH > r THEN DEC(RH) END
    END
  END Put1a;

  PROCEDURE Put1b(r, mno, off, disp: LONGINT);
  BEGIN (*emit modified format-1 instruction to be fixed up by loader, 0 <= mno < 64, 0 <= off < 256*)
    code[pc] := (((r+16) * C6 + mno) * C8 + off) * C12 + disp MOD C12; INC(pc)
  END Put1b;

  PROCEDURE Put2(op, a, b, off: LONGINT);
  BEGIN (*emit load/store instruction*)
    code[pc] := ((op * 20H + b) * 20H + a) * C16 + off MOD C16; INC(pc)
  END Put2;

  PROCEDURE Put3(op, cond, a, b, off: LONGINT; isFloatOp: BOOLEAN);
  VAR partialCode: LONGINT;
  BEGIN 
    IF isFloatOp & (cond IN {GTF, GEF}) THEN partialCode := ((op + cond - 2) * C5 + b) * C5 + a
    ELSIF ~isFloatOp & (cond IN {GT, GE}) THEN partialCode := ((op + cond - 4) * C5 + b) * C5 + a
    ELSE partialCode := ((op + cond) * C5 + a) * C5 + b
    END; 
    code[pc] := partialCode * C16 + off MOD C16;
    INC(pc)
  END Put3;

  PROCEDURE Put3a(op, mno, pno, disp: LONGINT);
  BEGIN (*emit modified branch instruction to be fixed up by loader, 0 <= mno < 64*)
    code[pc] := ((op * C6 + mno) * C8 + pno) * C14 + disp MOD C14; INC(pc)
  END Put3a;

  (*Jumps to register dest*)
  PROCEDURE Put3b(op, dest, addInfo: LONGINT);
  BEGIN code[pc] := (op * C5 + dest) * C21 + addInfo MOD C21; INC(pc)
  END Put3b;

  (*Jumps to immediate off*)
  PROCEDURE Put3c(op, off: LONGINT);
  BEGIN code[pc] := op * C26 + off MOD C26; INC(pc)
  END Put3c;

  PROCEDURE GetPosCodeAndOp(at: LONGINT; VAR codeAt, op: LONGINT);
  BEGIN
    codeAt := code[at];
    IF codeAt >= 0 THEN op := codeAt DIV C26
    ELSE (*clear highest bit*) codeAt := codeAt + C31; op := C5 + codeAt DIV C26
    END 
  END GetPosCodeAndOp;

  (*Gets registers a and b from code[at]. a is the result register, b is the 1st operand*)
  PROCEDURE GetCodeInfo(at: LONGINT; VAR a, b: LONGINT; VAR isFloatOp: BOOLEAN);
    VAR codeAt, op: LONGINT;
  BEGIN GetPosCodeAndOp(at, codeAt, op); a := 0; b := 0; isFloatOp := FALSE;
    IF (op = Bc + NE) & (codeAt MOD C16 = 0FFF8H) THEN GetPosCodeAndOp(at-1, codeAt, op) END; (*string relation*)
    IF op-Ldw IN {0,Ldb-Ldw} THEN a := codeAt DIV C16 MOD C5
    ELSIF op = Fpar THEN a := codeAt DIV C11 MOD C5; b:= codeAt DIV C21 MOD C5; isFloatOp := TRUE
    ELSIF op IN {0..29} THEN
      IF op MOD 2 = 0 THEN a := codeAt DIV C11 MOD C5 ELSE a := codeAt DIV C16 MOD C5 END ;
      b := codeAt DIV C21 MOD C5
    ELSE ORS.Mark("unexpected code")
    END
  END GetCodeInfo;

  (*Branch conditional*)
  (*cond := CS not implemented. it seems this method is never called with cond := CS*)
  (*TODO: create a non-extend implementatioon when cond = CC*)
  PROCEDURE PutBc(cond, off: LONGINT; extend: BOOLEAN);
    VAR a, b, op, lt: LONGINT; isFloatOp: BOOLEAN;
  BEGIN (*emit branch instruction*)
    IF cond = 7 THEN
      IF extend THEN Put3(Bc, NE, 0, 0, 1, FALSE); Put3c(J, off) ELSE Put3(Bc, EQ, 0, 0, off, FALSE) END
    ELSIF cond = 15 THEN
      IF extend THEN Put3(Bc, EQ, 0, 0, 1, FALSE); Put3c(J, off) ELSE Put3(Bc, NE, 0, 0, off, FALSE) END
    ELSE GetCodeInfo(pc - 1, a, b, isFloatOp);
      IF isFloatOp THEN op := Bcf; lt := LTF ELSE op := Bc; lt := LT END ;
      IF cond = CC THEN Put3(op, lt, b, 0, 1, isFloatOp); Put3(op, lt, a, 0, 1, isFloatOp); Put3c(J, off)
      ELSIF extend THEN Put3(op, negated[cond], a, 0, 1, isFloatOp); Put3c(J, off);
      ELSE Put3(op, cond, a, 0, off, isFloatOp)
      END
    END
  END PutBc;

  PROCEDURE PutPair(base, op, a, b, off, format: LONGINT);
    VAR high: LONGINT;
  BEGIN (*emit instruction pair to be fixed up by loader, 0 <= off < C24*)
    IF version = 0 THEN Put1(Mov, RH, 0, VarOrg0)
    ELSIF pc - fixorgD < C12 THEN
      IF base = 0 THEN high := off DIV C16 MOD C8; off := off MOD C16 ELSE high := 0 END ;
      Put1b(RH, -base, high, pc-fixorgD); fixorgD := pc-1;
    ELSE ORS.Mark("fixup impossible")
    END ;
    IF format = 1 THEN Put1(op, a, b, off) ELSE Put2(op, a, b, off) END
  END PutPair;

  PROCEDURE PutRfx;
  BEGIN (* emit return from interrupt instruction *)
    code[pc] := Rfx * C26;
    INC(pc)
  END PutRfx;

  PROCEDURE CheckRegs*;
  BEGIN
    IF RH # 1 THEN ORS.Mark("Reg Stack"); RH := 1 END ;
    IF pc >= maxCode - 40 THEN ORS.Mark("program too long") END ;
    IF frame # 0 THEN ORS.Mark("frame error"); frame := 0 END
  END CheckRegs;

  PROCEDURE SetCC(VAR x: Item; n: LONGINT);
  BEGIN x.mode := Cond; x.a := 0; x.b := 0; x.r := n
  END SetCC;

  (*cond = CS not implemented. it seems this method is never called with CS*)
  PROCEDURE Trap(cond, num: LONGINT);
    VAR info, a, b, op, lt: LONGINT; isFloatOp: BOOLEAN;
  BEGIN info := ORS.Pos() * C4 + num; GetCodeInfo(pc - 1, a, b, isFloatOp);
    IF isFloatOp THEN op := Bcf; lt := LTF ELSE op := Bc; lt := LT END ;
    IF cond = CC THEN Put3(op, lt, b, 0, 1, isFloatOp); Put3(op, lt, a, 0, 1, isFloatOp); 
    ELSIF cond = 7 THEN  Put3(op, NE, 0, 0, 1, isFloatOp);
    ELSIF cond = 15 THEN Put3(op, EQ, 0, 0, 1, isFloatOp);
    ELSE Put3(op, negated[cond], a, 0, 1, isFloatOp);
    END;
    Put3b(Blr, TR, info)
  END Trap;

  PROCEDURE NilCheck;
  BEGIN IF check THEN Trap(EQ, 4) END
  END NilCheck;

  (*handling of forward reference, fixups of instruction operands*)

  PROCEDURE fix(at, with: LONGINT);
  BEGIN (*fix format-3 branch instruction*)
    code[at] := code[at] DIV C26 * C26 + with MOD C26
  END fix;

  PROCEDURE fix1(at, with: LONGINT);
  BEGIN (*fix format-1 register instruction*)
    code[at] := code[at] DIV C16 * C16 + with MOD C16
  END fix1;

  PROCEDURE FixLinkWith(L, x: LONGINT); (*fixup with offset to x*)
    VAR L1, codeAtL, op: LONGINT;
  BEGIN (*fix chain of format-1 or format-3 instructions*)
    WHILE L # 0 DO
      GetPosCodeAndOp(L, codeAtL, op);
      IF op IN {1,3,4,5,7,15,17,19,21,25,29} THEN L1 := codeAtL MOD C16; fix1(L, (x-L)*4) (*format-1*)
      ELSIF op-Bc IN {0..Blr-Bc} THEN L1 := codeAtL MOD C26; fix(L, x-L-1) (*format-3*)
      ELSE ORS.Mark("fixup impossible"); L1 := 0
      END ;
      L := L1;
    END
  END FixLinkWith;

  PROCEDURE FixLink*(L: LONGINT); (*fixup with offset to pc*)
  BEGIN FixLinkWith(L, pc)
  END FixLink;

  PROCEDURE FixLinkPair(L, adr: LONGINT);
    VAR L1, codeAtL, codeAtLPrev: LONGINT;
  BEGIN (*fix chain of instruction pairs with an address that is spread among both instructions, 0 <= adr < C24*)
    WHILE L # 0 DO
      codeAtL := code[L]; codeAtLPrev := code[L-1];
      L1 := codeAtL MOD C16 + codeAtLPrev DIV C12 MOD C8;
      code[L-1] := codeAtLPrev DIV C20 * C20 + (adr DIV C16 MOD C8) * C12 + codeAtLPrev MOD C12;
      code[L] := codeAtL DIV C16 * C16 + adr MOD C16;
      L := L1
    END
  END FixLinkPair;

  PROCEDURE merged(L0, L1: LONGINT): LONGINT;
    VAR L2, L3, codeAtL2: LONGINT;
  BEGIN (*merge chains of the two operands of AND and OR*)
    IF L0 # 0 THEN L3 := L0;
      REPEAT L2 := L3; codeAtL2 := code[L2]; L3 := codeAtL2 MOD C16 UNTIL L3 = 0;
      code[L2] := codeAtL2 + L1; L1 := L0
    END ;
    RETURN L1
  END merged;

  (* loading of operands and addresses into registers *)

  PROCEDURE load(VAR x: Item);
    VAR op: LONGINT;
  BEGIN    
    IF x.mode # Reg THEN
      IF x.type.size = 1 THEN op := Ldb ELSE op := Ldw END ;
      IF x.mode = CORB.Const THEN
        IF x.type.form = CORB.Proc THEN
          IF x.a < 0 THEN (*forward*) Put3c(Bl, 0); Put1(Add, RH, LNK, x.type.len); x.type.len := pc-1  (*fixed up in CORP.Body*)
          ELSIF x.r > 0 THEN (*local*) ORS.Mark("not allowed")
          ELSIF x.r = 0 THEN (*global*) Put3c(Bl, 0); Put1a(Sub, RH, LNK, pc*4 - x.a, FALSE)
          ELSE (*imported*) PutPair(x.r, Add, RH, RH, x.a + C8, 1) (*mark as progbase-relative*)
          END
        ELSE Put1a(Mov, RH, 0, x.a, TRUE)
        END ;
        x.r := RH; incR
      ELSIF x.mode = CORB.Var THEN
        IF x.r > 0 THEN (*local*) 
          IF x.a <= (currentParlbksize - 4) THEN (* x is parameter *) op := Ldw; END ;
          Put2(op, RH, SP, x.a + frame) 
        ELSE PutPair(x.r, op, RH, RH, x.a, 2) 
        END ;
        x.r := RH; incR
      ELSIF x.mode = CORB.Par THEN Put2(Ldw, RH, SP, x.a + frame); Put2(op, RH, RH, x.b); x.r := RH; incR
      ELSIF x.mode = RegI THEN Put2(op, x.r, x.r, x.a)
      ELSIF x.mode = Cond THEN
        PutBc(negated[x.r], 2, FALSE);
        FixLink(x.b); Put1(Mov, RH, 0, 1); Put3c(J, 1);
        FixLink(x.a); Put1(Mov, RH, 0, 0); x.r := RH; incR
      END ;
      x.mode := Reg
    END ;
  END load;

  PROCEDURE loadAdr(VAR x: Item);
  BEGIN
    IF x.mode = CORB.Var THEN
      IF x.r > 0 THEN (*local*) Put1a(Add, RH, SP, x.a + frame, FALSE) ELSE PutPair(x.r, Add, RH, RH, x.a, 1) END ;
      x.r := RH; incR
    ELSIF x.mode = CORB.Par THEN Put2(Ldw, RH, SP, x.a + frame);
      IF x.b # 0 THEN Put1a(Add, RH, RH, x.b, FALSE) END ;
      x.r := RH; incR
    ELSIF x.mode = RegI THEN
      IF x.a # 0 THEN Put1a(Add, x.r, x.r, x.a, FALSE) END
    ELSE ORS.Mark("address error")
    END ;
    x.mode := Reg
  END loadAdr;

  PROCEDURE loadCond(VAR x: Item);
    VAR codeAt, op: LONGINT;
  BEGIN
    IF x.mode # Cond THEN
      IF x.type.form = CORB.Bool THEN
        IF x.mode = CORB.Const THEN x.r := 15 - x.a*8
        ELSE load(x);
          GetPosCodeAndOp(pc - 1, codeAt, op);
          IF op-Ldw IN -{0,Ldb-Ldw,Stw-Ldw,Stb-Ldw} THEN Put1(Cmp, x.r, x.r, 0); END ;
          x.r := NE; DEC(RH)
        END ;
        x.mode := Cond; x.a := 0; x.b := 0
      ELSE ORS.Mark("not Boolean?")
      END
    END ;
  END loadCond;

  PROCEDURE loadTypTagAdr(T: CORB.Type);
    VAR x: Item;
  BEGIN
    IF T.mno > 0 THEN (*imported*) x.mode := CORB.Var; x.a := T.len; x.r := -T.mno; loadAdr(x)
    ELSE PutPair(0, Add, RH, RH, T.len, 1); incR; T.len := pc-1  (*fixed up in Close and again by loader*)
    END
  END loadTypTagAdr;

  PROCEDURE loadStringAdr(VAR x: Item);
  BEGIN
    IF x.r >= 0 THEN PutPair(0, Add, RH, RH, varx+x.a, 1) ELSE (*imported*) PutPair(x.r, Add, RH, RH, x.a, 1) END ;
    x.mode := Reg; x.r := RH; incR
  END loadStringAdr;

  (* Items: Conversion from constants or from Objects on the Heap to Items on the Stack*)

  PROCEDURE MakeConstItem*(VAR x: Item; typ: CORB.Type; val: LONGINT);
  BEGIN x.mode := CORB.Const; x.type := typ; x.a := val
  END MakeConstItem;

  PROCEDURE MakeRealItem*(VAR x: Item; val: REAL);
  BEGIN x.mode := CORB.Const; x.type := CORB.realType; x.a := SYSTEM.VAL(LONGINT, val)
  END MakeRealItem;

  PROCEDURE MakeStringItem*(VAR x: Item; len: LONGINT);  (*copies string from ORS-buffer to ORG-string array*)
    VAR i: LONGINT;
  BEGIN x.mode := CORB.Const; x.type := CORB.strType; x.a := strx; x.b := len; x.r := 0; i := 0;
    IF strx + len + 4 < maxStrx THEN
      WHILE len > 0 DO str[strx] := ORS.str[i]; INC(strx); INC(i); DEC(len) END ;
      WHILE strx MOD 4 # 0 DO str[strx] := 0X; INC(strx) END
    ELSE ORS.Mark("too many strings")
    END
  END MakeStringItem;

  PROCEDURE MakeItem*(VAR x: Item; y: CORB.Object; curlev: LONGINT);
  BEGIN x.mode := y.class; x.type := y.type; x.a := y.val; x.rdo := y.rdo;
    IF y.class = CORB.Par THEN x.b := 0
    ELSIF (y.class = CORB.Const) & (y.type.form = CORB.String) THEN x.r := y.lev;
      x.a := y.val MOD C20; (*strx/exno*) x.b := y.val DIV C20 (*len*)
    ELSE x.r := y.lev
    END
  END MakeItem;

  (* Code generation for Selectors, Variables, Constants *)

  PROCEDURE Field*(VAR x: Item; y: CORB.Object);   (* x := x.y *)
  BEGIN
    IF x.mode = CORB.Var THEN
      IF x.r >= 0 THEN x.a := x.a + y.val
      ELSE loadAdr(x); x.mode := RegI; x.a := y.val
      END
    ELSIF x.mode = RegI THEN x.a := x.a + y.val
    ELSIF x.mode = CORB.Par THEN x.b := x.b + y.val
    END
  END Field;

  PROCEDURE Index*(VAR x, y: Item);   (* x := x[y] *)
    VAR s, lim: LONGINT;
  BEGIN s := x.type.base.size; lim := x.type.len;
    IF (y.mode = CORB.Const) & (y.a < 0) THEN ORS.Mark("bad index") END ;
    IF (y.mode = CORB.Const) & (lim >= 0) THEN
      IF y.a >= lim THEN ORS.Mark("bad index") END ;
      IF x.mode IN {CORB.Var, RegI} THEN x.a := y.a * s + x.a
      ELSIF x.mode = CORB.Par THEN x.b := y.a * s + x.b
      END
    ELSE load(y);
      IF check THEN  (*check array bounds*)
        IF lim >= 0 THEN Put1a(Cmp, RH, y.r, lim, FALSE)
        ELSIF x.mode IN {CORB.Var, CORB.Par} THEN (*open array param*) Put2(Ldw, RH, SP, x.a+4+frame); Put0(Cmp, RH, y.r, RH)
        ELSIF x.mode = RegI THEN (*dynamic open array*) Put2(Ldw, RH, x.r, -16); (*len*) Put0(Cmp, RH, y.r, RH)
        ELSE ORS.Mark("error in Index")
        END ;
        Trap(CC, 1)
      END ;
      IF s = 4 THEN Put1(Lsl, y.r, y.r, 2) ELSIF s > 1 THEN Put1a(Mul, y.r, y.r, s, FALSE) END ;
      IF x.mode = CORB.Var THEN
        IF x.r > 0 THEN (*local*) Put0(Add, y.r, SP, y.r); INC(x.a, frame)
        ELSIF x.r = 0 THEN (*global*) PutPair(0, Add, RH, RH, 0, 1); Put0(Add, y.r, RH, y.r)
        ELSE (*imported*) PutPair(x.r, Add, RH, RH, x.a, 1); Put0(Add, y.r, RH, y.r); x.a := 0
        END ;
        x.r := y.r; x.mode := RegI
      ELSIF x.mode = CORB.Par THEN
        Put2(Ldw, RH, SP, x.a + frame);
        Put0(Add, y.r, RH, y.r); x.mode := RegI; x.r := y.r; x.a := x.b
      ELSIF x.mode = RegI THEN Put0(Add, x.r, x.r, y.r); DEC(RH)
      END
    END
  END Index;

  PROCEDURE DeRef*(VAR x: Item);
  BEGIN
    IF x.mode = CORB.Var THEN
      IF x.r > 0 THEN (*local*) Put2(Ldw, RH, SP, x.a + frame) ELSE PutPair(x.r, Ldw, RH, RH, x.a, 2) END ;
      NilCheck; x.r := RH; incR
    ELSIF x.mode = CORB.Par THEN
      Put2(Ldw, RH, SP, x.a + frame); Put2(Ldw, RH, RH, x.b); NilCheck; x.r := RH; incR
    ELSIF x.mode = RegI THEN Put2(Ldw, x.r, x.r, x.a); NilCheck
    ELSIF x.mode # Reg THEN ORS.Mark("bad mode in DeRef")
    END ;
    IF x.type.base.form = CORB.Array THEN Put1(Add, x.r, x.r, 16) END ; (*pointer to array*)
    x.mode := RegI; x.a := 0; x.b := 0
  END DeRef;

  PROCEDURE Method*(VAR x: Item; y: CORB.Object; wasderef, super: BOOLEAN);
  BEGIN loadAdr(x);  (*receiver*)
    IF super THEN x.a := y.val; (*mthadr/exno*) x.b := -y.type.mno (*global/imported, x.b <= 0*)
    ELSE x.a := y.lev; (*mthno*)
      IF wasderef THEN x.b := CORB.Var (*pointer*) ELSE x.b := CORB.Par (*record*) END (*x.b > 0*)
    END
  END Method;

  PROCEDURE Q(T: CORB.Type; VAR tdw: LONGINT);
  BEGIN (*one entry of type descriptor extension table*)
    IF T.base # NIL THEN
      Q(T.base, tdw); td[tdw] := (T.mno*C12 + T.len (*TDoff/exno*)) * C12 + tdw - fixorgT;
      fixorgT := tdw; INC(tdw)
    END
  END Q;

  PROCEDURE FindRefFlds(ftyp: SET; typ: CORB.Type; off: LONGINT; VAR tdw: LONGINT);
    VAR fld: CORB.Object; i, s: LONGINT;
  BEGIN
    IF typ.form IN ftyp THEN td[tdw] := off; INC(tdw)
    ELSIF typ.form = CORB.Record THEN fld := typ.dsc;
      WHILE fld # NIL DO FindRefFlds(ftyp, fld.type, fld.val + off, tdw); fld := fld.next END
    ELSIF typ.form = CORB.Array THEN s := typ.base.size;
      FOR i := 0 TO typ.len-1 DO FindRefFlds(ftyp, typ.base, i*s + off, tdw) END
    END
  END FindRefFlds;

  PROCEDURE BuildTD(T: CORB.Type; VAR tdw: LONGINT);
    VAR k, s: LONGINT; fld, bot: CORB.Object; t: CORB.Type;
  BEGIN (*type descriptors of base types of T already built*)
    k := CORB.NofMethods(T); td[tdw] := -k-1; INC(tdw); s := tdw;
    WHILE k > 0 DO td[tdw] := -1; INC(tdw); DEC(k) END ;
    t := T; fld := NIL;  (*build method table*)
    WHILE t # NIL DO fld := t.dsc;
      IF t.base # NIL THEN bot := t.base.dsc ELSE bot := NIL END ;
      WHILE fld # bot DO
        IF (fld.class = CORB.Const) & (td[tdw-fld.lev-1] = -1) & ((t.mno = 0) OR (fld.name[0] # 0X)) THEN
          td[tdw-fld.lev-1] := (t.mno*C16 + fld.val (*mthadr/exno*)) * C10
        END ;
        fld := fld.next
      END ;
      t := t.base
    END ;
    FOR k := s TO tdw-1 DO  (*insert displacements in ascending order*)
      IF td[k] # -1 THEN td[k] := td[k] + k - fixorgM; fixorgM := k ELSE td[k] := 0 END
    END ;
    s := T.size;  (*convert size for heap allocation*)
    IF s <= 24 THEN s := 32 ELSIF s <= 56 THEN s := 64 ELSIF s <= 120 THEN s := 128
    ELSE s := (s+263) DIV 256 * 256
    END ;
    T.len := tdw*4; td[tdw] := s; INC(tdw);  (*len used as type descriptor offset in bytes relative to tdx = varx + strx*)
    k := T.nofpar;  (*extension level!*)
    IF k > 3 THEN ORS.Mark("ext level too large")
    ELSE Q(T, tdw);
      WHILE k < 3 DO td[tdw] := -1; INC(tdw); INC(k) END
    END ;
    FindRefFlds(CORB.Ptrs, T, 0, tdw); td[tdw] := -1; INC(tdw);
    FindRefFlds(CORB.Procs, T, 0, tdw); td[tdw] := -1; INC(tdw);
    IF tdw >= maxTD THEN ORS.Mark("too many record types"); tdw := 0 END
  END BuildTD;

  PROCEDURE TypeTest*(VAR x: Item; T: CORB.Type; varpar, isguard: BOOLEAN);
    VAR pc0: LONGINT;
  BEGIN
    IF T = NIL THEN
      IF x.mode >= Reg THEN DEC(RH) END ;
      SetCC(x, 7)
    ELSE (*fetch tag into RH*)
      IF varpar THEN Put2(Ldw, RH, SP, x.a+4+frame)
      ELSE load(x);
        pc0 := pc; PutBc(EQ, 0, TRUE);  (*NIL belongs to every pointer type*)
        Put2(Ldw, RH, x.r, -8)
      END ;
      Put2(Ldw, RH, RH, T.nofpar*4); incR;
      loadTypTagAdr(T);  (*tag of T*)
      Put0(Cmp, RH-1, RH-1, RH-2); DEC(RH, 2);
      IF ~varpar THEN fix(pc0, pc - pc0 - 1) END ;
      IF isguard THEN
        IF check THEN Trap(NE, 2) END
      ELSE SetCC(x, EQ);
        IF ~varpar THEN DEC(RH) END
      END
    END
  END TypeTest;

  (* Code generation for Boolean operators *)

  PROCEDURE Not*(VAR x: Item);   (* x := ~x *)
    VAR t: LONGINT;
  BEGIN loadCond(x); x.r := negated[x.r]; t := x.a; x.a := x.b; x.b := t
  END Not;

  PROCEDURE And1*(VAR x: Item);   (* x := x & *)
  BEGIN loadCond(x); PutBc(negated[x.r], x.a, TRUE); x.a := pc-1; FixLink(x.b); x.b := 0
  END And1;

  PROCEDURE And2*(VAR x, y: Item);
  BEGIN loadCond(y); x.a := merged(y.a, x.a); x.b := y.b; x.r := y.r
  END And2;

  PROCEDURE Or1*(VAR x: Item);   (* x := x OR *)
  BEGIN loadCond(x); PutBc(x.r, x.b, TRUE);  x.b := pc-1; FixLink(x.a); x.a := 0
  END Or1;

  PROCEDURE Or2*(VAR x, y: Item);
  BEGIN loadCond(y); x.a := y.a; x.b := merged(y.b, x.b); x.r := y.r
  END Or2;

  (* Code generation for arithmetic operators *)

  PROCEDURE Neg*(VAR x: Item);   (* x := -x *)
  BEGIN
    IF x.type.form = CORB.Int THEN
      IF x.mode = CORB.Const THEN x.a := -x.a
      ELSE load(x); Put1(Mov, RH, 0, 0); Put0(Sub, x.r, RH, x.r)
      END
    ELSIF x.type.form = CORB.Real THEN
      IF x.mode = CORB.Const THEN x.a := x.a + 7FFFFFFFH + 1
      ELSE load(x); Put1(Mov, RH, 0, 0); Put0a(Subf, x.r, RH, x.r)
      END
    ELSE (*form = Set*)
      IF x.mode = CORB.Const THEN x.a := -x.a-1 
      ELSE
        load(x);
        incR;
        Put1(Mov, RH-1, 0, -1);
        Put0(Xor, x.r, x.r, RH-1);
        DEC(RH)
      END
    END
  END Neg;

  PROCEDURE AddOp*(op: LONGINT; VAR x, y: Item);   (* x := x +- y *)
  BEGIN
    IF op = ORS.plus THEN
      IF (x.mode = CORB.Const) & (y.mode = CORB.Const) THEN x.a := x.a + y.a
      ELSIF y.mode = CORB.Const THEN load(x);
        IF y.a # 0 THEN Put1a(Add, x.r, x.r, y.a, FALSE) END
      ELSE load(x); load(y); Put0(Add, RH-2, x.r, y.r); DEC(RH); x.r := RH-1
      END
    ELSE (*op = ORS.minus*)
      IF (x.mode = CORB.Const) & (y.mode = CORB.Const) THEN x.a := x.a - y.a
      ELSIF y.mode = CORB.Const THEN load(x);
        IF y.a # 0 THEN Put1a(Sub, x.r, x.r, y.a, FALSE) END
      ELSE load(x); load(y); Put0(Sub, RH-2, x.r, y.r); DEC(RH); x.r := RH-1
      END
    END
  END AddOp;

  PROCEDURE log2(m: LONGINT; VAR e: LONGINT): LONGINT;
  BEGIN e := 0;
    WHILE ~ODD(m) DO m := m DIV 2; INC(e) END ;
    RETURN m
  END log2;

  PROCEDURE MulOp*(VAR x, y: Item);   (* x := x * y *)
    VAR e: LONGINT;
  BEGIN
    IF (x.mode = CORB.Const) & (y.mode = CORB.Const) THEN x.a := x.a * y.a
    ELSIF (y.mode = CORB.Const) & (y.a >= 2) & (log2(y.a, e) = 1) THEN load(x); Put1(Lsl, x.r, x.r, e)
    ELSIF y.mode = CORB.Const THEN load(x); Put1a(Mul, x.r, x.r, y.a, FALSE)
    ELSIF (x.mode = CORB.Const) & (x.a >= 2) & (log2(x.a, e) = 1) THEN load(y); Put1(Lsl, y.r, y.r, e); x.mode := Reg; x.r := y.r
    ELSIF x.mode = CORB.Const THEN load(y); Put1a(Mul, y.r, y.r, x.a, FALSE); x.mode := Reg; x.r := y.r
    ELSE load(x); load(y); Put0(Mul, RH-2, x.r, y.r); DEC(RH); x.r := RH-1
    END
  END MulOp;

  PROCEDURE DivOp*(op: LONGINT; VAR x, y: Item);   (* x := x op y *)
    VAR e, pc0: LONGINT;
  BEGIN
    IF op = ORS.div THEN
      IF (x.mode = CORB.Const) & (y.mode = CORB.Const) THEN
        IF y.a > 0 THEN x.a := x.a DIV y.a ELSE ORS.Mark("bad divisor") END
      ELSIF (y.mode = CORB.Const) & (y.a >= 2) & (log2(y.a, e) = 1) THEN load(x); Put1(Sar, x.r, x.r, e)
      ELSIF y.mode = CORB.Const THEN
        IF y.a > 0 THEN
          load(x);
          incR;
          Put1a(Rem, RH-1, x.r, y.a, FALSE);
          Put1a(Div, x.r, x.r, y.a, FALSE);
          Put3(Bc, LE, 0, RH-1, 1, FALSE);
          Put1(Sub, x.r, x.r, 1);
          DEC(RH)
        ELSE
          ORS.Mark("bad divisor")
        END
      ELSE load(y);
        IF check THEN Trap(LE, 6) END ;
        load(x);
        incR;
        Put0(Rem, RH-1, x.r, y.r);
        Put0(Div, RH-3, x.r, y.r);
        Put3(Bc, LE, 0, RH-1, 1, FALSE);
        Put1(Sub, RH-3, RH-3, 1);
        DEC(RH, 2); x.r := RH-1
      END
    ELSE (*op = ORS.mod*)
      IF (x.mode = CORB.Const) & (y.mode = CORB.Const) THEN
        IF y.a > 0 THEN x.a := x.a MOD y.a ELSE ORS.Mark("bad modulus") END
      (* we have the Rem instruction, we don't need shift left and right in this case *)
      ELSIF y.mode = CORB.Const THEN
        IF y.a > 0 THEN
          load(x);
          Put1a(Rem, x.r, x.r, y.a, FALSE);
          pc0 := pc;
          Put3(Bc, LE, 0, x.r, (* to be fixed *) 0, FALSE);
          Put1a(Add, x.r, x.r, y.a, FALSE);
          fix(pc0, x.r * C16 + (pc-pc0-1)) (* fix jump over add *)
        ELSE
          ORS.Mark("bad modulus")
        END
      ELSE load(y);
        IF check THEN Trap(LE, 6) END ;
        load(x);
        incR;
        Put0(Rem, RH-1, x.r, y.r);
        Put3(Bc, LE, 0, RH-1, 1, FALSE);
        Put0(Add, RH-1, RH-1, y.r);
        x.r := RH-1;
        DEC(RH, 2);
      END
    END
  END DivOp;

  (* Code generation for REAL operators *)

  PROCEDURE RealOp*(op: INTEGER; VAR x, y: Item);   (* x := x op y *)
  BEGIN load(x); load(y);
    IF op = ORS.plus THEN Put0a(Addf, RH-2, x.r, y.r)
    ELSIF op = ORS.minus THEN Put0a(Subf, RH-2, x.r, y.r)
    ELSIF op = ORS.times THEN Put0a(Mulf, RH-2, x.r, y.r)
    ELSIF op = ORS.rdiv THEN Put0a(Divf, RH-2, x.r, y.r)
    END ;
    DEC(RH); x.r := RH-1
  END RealOp;

  (* Code generation for set operators *)

  PROCEDURE Singleton*(VAR x: Item);  (* x := {x} *)
  BEGIN
    IF x.mode = CORB.Const THEN x.a := LSL(1, x.a)
    ELSE load(x); Put1(Mov, RH, 0, 1); Put0(Lsl, x.r, RH,  x.r)
    END
  END Singleton;

  PROCEDURE Set*(VAR x, y: Item);   (* x := {x .. y} *)
  BEGIN
    IF (x.mode = CORB.Const) & ( y.mode = CORB.Const) THEN
      IF x.a <= y.a THEN x.a := LSL(2, y.a) - LSL(1, x.a) ELSE x.a := 0 END
    ELSE
      IF (x.mode = CORB.Const) & (x.a <= 16) THEN x.a := LSL(-1, x.a)
      ELSE load(x); Put1(Mov, RH, 0, -1); Put0(Lsl, x.r, RH, x.r)
      END ;
      IF (y.mode = CORB.Const) & (y.a < 16) THEN Put1(Mov, RH, 0, LSL(-2, y.a)); y.mode := Reg; y.r := RH; incR
      ELSE load(y); Put1(Mov, RH, 0, -2); Put0(Lsl, y.r, RH, y.r)
      END ;
      IF x.mode = CORB.Const THEN
        IF x.a # 0 THEN
          incR;
          Put1(Mov, RH-1, 0, -1);
          Put0(Xor, x.r, x.r, RH-1);
          DEC(RH);

          incR;
          Put1a(Mov, RH-1, 0, x.a, TRUE);
          Put0(And, RH-2, y.r, RH-1);
          DEC(RH);
        END ;
        x.mode := Reg; x.r := RH-1
      ELSE DEC(RH); Put0(Ann, RH-1, x.r, y.r)
      END
    END
  END Set;

  PROCEDURE CheckBit(VAR z, n: Item);
    VAR na: LONGINT;
  BEGIN
    IF n.mode = CORB.Const THEN 
      na := n.a MOD maxSet; IF na < 0 THEN na := na + maxSet END; 
      Put1(Lsl, z.r, z.r, 31-na); DEC(RH)
    ELSE load(n); Put1(Add, RH, 0, 31); Put0(Sub, n.r, RH, n.r); Put0(Lsl, z.r, z.r, n.r); DEC(RH, 2)
    END ;
  END CheckBit;

  PROCEDURE In*(VAR x, y: Item);  (* x := x IN y *)
  BEGIN load(y); CheckBit(y, x); SetCC(x, MI) 
  END In;

  PROCEDURE SetOp*(op: LONGINT; VAR x, y: Item);   (* x := x op y *)
    VAR xset, yset: SET; (*x.type.form = Set*)
  BEGIN
    IF (x.mode = CORB.Const) & (y.mode = CORB.Const) THEN
      xset := SYSTEM.VAL(SET, x.a); yset := SYSTEM.VAL(SET, y.a);
      IF op = ORS.plus THEN xset := xset + yset
      ELSIF op = ORS.minus THEN xset := xset - yset
      ELSIF op = ORS.times THEN xset := xset * yset
      ELSIF op = ORS.rdiv THEN xset := xset / yset
      END ;
      x.a := SYSTEM.VAL(LONGINT, xset)
    ELSIF y.mode = CORB.Const THEN
      load(x);
      IF op = ORS.plus THEN Put1a(Ior, x.r, x.r, y.a, FALSE)
      ELSIF op = ORS.minus THEN Put1a(Ann, x.r, x.r, y.a, FALSE)
      ELSIF op = ORS.times THEN Put1a(And, x.r, x.r, y.a, FALSE)
      ELSIF op = ORS.rdiv THEN Put1a(Xor, x.r, x.r, y.a, FALSE)
      END ;
    ELSE load(x); load(y);
      IF op = ORS.plus THEN Put0(Ior, RH-2, x.r, y.r)
      ELSIF op = ORS.minus THEN Put0(Ann, RH-2, x.r, y.r)
      ELSIF op = ORS.times THEN Put0(And, RH-2, x.r, y.r)
      ELSIF op = ORS.rdiv THEN Put0(Xor, RH-2, x.r, y.r)
      END ;
      DEC(RH); x.r := RH-1
    END 
  END SetOp;

  (* Code generation for relations *)

  PROCEDURE IntRelation*(op: INTEGER; VAR x, y: Item);   (* x := x < y *)
  BEGIN
    IF (y.mode = CORB.Const) & (y.type.form # CORB.Proc) THEN
      load(x);
      IF (y.a # 0) OR ~(op IN {ORS.eql, ORS.neq}) OR (code[pc-1] DIV C30 # F2) THEN Put1a(Cmp, x.r, x.r, y.a, FALSE) END ;
      DEC(RH)
    ELSE
      IF (x.mode = Cond) OR (y.mode = Cond) THEN ORS.Mark("not implemented") END ;
      load(x); load(y); Put0(Cmp, x.r, x.r, y.r); DEC(RH, 2)
    END ;
    SetCC(x, relmap[op - ORS.eql])
  END IntRelation;

  PROCEDURE RealRelation*(op: INTEGER; VAR x, y: Item);   (* x := x < y *)
  BEGIN load(x);
    IF (y.mode = CORB.Const) & (y.a = 0) THEN DEC(RH)
    ELSE load(y); Put0a(Subf, x.r, x.r, y.r); DEC(RH, 2)
    END ;
    SetCC(x, relmap[op - ORS.eql])
  END RealRelation;

  PROCEDURE StringRelation*(op: INTEGER; VAR x, y: Item);   (* x := x < y *)
    (*x, y are char arrays or strings*)
  BEGIN
    IF x.type.form = CORB.String THEN loadStringAdr(x) ELSE loadAdr(x) END ;
    IF y.type.form = CORB.String THEN loadStringAdr(y) ELSE loadAdr(y) END ;
    Put2(Ldb, RH, x.r, 0); Put1(Add, x.r, x.r, 1);
    Put2(Ldb, RH+1, y.r, 0); Put1(Add, y.r, y.r, 1);
    Put0(Cmp, RH+2, RH, RH+1); Put3(Bc, NE, RH+2, 0, 2, FALSE);
    Put1(Cmp, RH+2, RH, 0); Put3(Bc, NE, RH+2, 0, -8, FALSE);
    DEC(RH, 2); SetCC(x, relmap[op - ORS.eql])
  END StringRelation;

  (* Code generation of Assignments *)

  PROCEDURE StrToChar*(VAR x: Item);
  BEGIN x.type := CORB.charType; DEC(strx, 4); x.a := ORD(str[x.a])
  END StrToChar;

  PROCEDURE Store*(VAR x, y: Item); (* x := y *)
    VAR op: LONGINT;
  BEGIN  load(y);
    IF x.type.size = 1 THEN op := Stb ELSE op := Stw END ;
    IF x.mode = CORB.Var THEN
      IF x.r > 0 THEN (*local*)
        IF x.a <= (currentParlbksize - 4) THEN (* x is parameter *) op := Stw; END ;
        Put2(op, y.r, SP, x.a + frame)
      ELSE
        PutPair(x.r, op, y.r, RH, x.a, 2)
      END
    ELSIF x.mode = CORB.Par THEN Put2(Ldw, RH, SP, x.a + frame); Put2(op, y.r, RH, x.b);
    ELSIF x.mode = RegI THEN Put2(op, y.r, x.r, x.a); DEC(RH);
    ELSE ORS.Mark("bad mode in Store")
    END ;
    DEC(RH)
  END Store;

  PROCEDURE StoreStruct*(VAR x, y: Item); (* x := y, frame = 0 *)
    VAR s, pc0: LONGINT;
  BEGIN loadAdr(x); loadAdr(y);
    IF (x.type.form = CORB.Array) & (x.type.len > 0) THEN
      IF y.type.len >= 0 THEN
        IF x.type.size = y.type.size THEN Put1a(Mov, RH, 0, (y.type.size+3) DIV 4, TRUE)
        ELSE ORS.Mark("different length/size, not implemented")
        END
      ELSE (*y open array param or dynamic open array*)
        IF y.type.size > 0 THEN Put2(Ldw, RH, SP, y.a+4) ELSE Put2(Ldw, RH, y.r, -16) END ; (*len*)
        s := y.type.base.size;  (*element size*)
        pc0 := pc; PutBc(EQ, 0, TRUE);
        IF s = 1 THEN Put1(Add, RH, RH, 3); Put1(Sar, RH, RH, 2)
        ELSIF s # 4 THEN Put1a(Mul, RH, RH, s DIV 4, FALSE)
        END ;
        IF check THEN (*check array lengths*)
          Put1a(Mov, RH+1, 0, (x.type.size+3) DIV 4, TRUE); Put0(Cmp, RH+1, RH, RH+1); Trap(GT, 3)
        END ;
        fix(pc0, pc + 5 - pc0)
      END
    ELSIF x.type.form = CORB.Record THEN Put1a(Mov, RH, 0, x.type.size DIV 4, TRUE)
    ELSE ORS.Mark("inadmissible assignment")
    END ;
    Put2(Ldw, RH+1, y.r, 0); Put1(Add, y.r, y.r, 4);
    Put2(Stw, RH+1, x.r, 0); Put1(Add, x.r, x.r, 4);
    Put1(Sub, RH, RH, 1); Put3(Bc, NE, RH, 0, -6, FALSE); RH := 1
  END StoreStruct;

  PROCEDURE CopyString*(VAR x, y: Item);  (* x := y, frame = 0 *) 
     VAR len: LONGINT;
   BEGIN loadAdr(x); len := x.type.len;
    IF len >= 0 THEN
      IF len <  y.b THEN ORS.Mark("string too long") END
    ELSIF check THEN (*x open array param or dynamic open array*)
      IF x.type.size > 0 THEN Put2(Ldw, RH, SP, x.a+4) ELSE Put2(Ldw, RH, x.r, -16) END ; (*len*)
      Put1(Cmp,RH, RH, y.b); Trap(LT, 3)
    END ;
    loadStringAdr(y);
    Put2(Ldw, RH, y.r, 0); Put1(Add, y.r, y.r, 4);
    Put2(Stw, RH, x.r, 0); Put1(Add, x.r, x.r, 4);
    Put1(Sar, RH, RH, 24); Put3(Bc, NE, RH, 0, -6, FALSE);  RH := 1
  END CopyString;

  (* Code generation for parameters *)

  PROCEDURE OpenArrayParam*(VAR x: Item);
  BEGIN loadAdr(x);
    IF x.type.len >= 0 THEN Put1a(Mov, RH, 0, x.type.len, TRUE)
    ELSIF x.type.size > 0 THEN (*open array param*) Put2(Ldw, RH, SP, x.a+4+frame)
    ELSE (*dynamic open array*) Put2(Ldw, RH, x.r, -16) (*len*)
    END ;
    incR
  END OpenArrayParam;

  PROCEDURE VarParam*(VAR x: Item; ftype: CORB.Type);
    VAR xmd: INTEGER;
  BEGIN xmd := x.mode; loadAdr(x);
    IF (ftype.form = CORB.Array) & (ftype.len < 0) THEN (*open array*)
      IF x.type.len >= 0 THEN Put1a(Mov, RH, 0, x.type.len, TRUE)
      ELSIF x.type.size > 0 THEN (*open array param*) Put2(Ldw, RH, SP, x.a+4+frame)
      ELSE (*dynamic open array*) Put2(Ldw, RH, x.r, -16) (*len*)
      END ;
      incR
    ELSIF ftype.form = CORB.Record THEN
      IF xmd = CORB.Par THEN Put2(Ldw, RH, SP, x.a+4+frame); incR ELSE loadTypTagAdr(x.type) END
    END
  END VarParam;

  PROCEDURE ValueParam*(VAR x: Item);
  BEGIN load(x)
  END ValueParam;

  PROCEDURE StringParam*(VAR x: Item);
  BEGIN loadStringAdr(x); Put1(Mov, RH, 0, x.b); incR  (*len*)
  END StringParam;

  PROCEDURE ReceiverParam*(VAR x: Item; par: CORB.Object);
  BEGIN
    IF x.r # RH THEN Put0(Mov, RH, 0, x.r) END ;  (*receiver -> R0*)
    incR;
    IF par.class = CORB.Par THEN (*record*) loadTypTagAdr(par.type) END  (*type tag -> R1*)
  END ReceiverParam;

  (*For Statements*)

  PROCEDURE For0*(VAR x, y: Item);
  BEGIN load(y)
  END For0;

  PROCEDURE For1*(VAR x, y, z, w: Item; VAR L: LONGINT);
  BEGIN 
    IF z.mode = CORB.Const THEN Put1a(Cmp, RH, y.r, z.a, FALSE)
    ELSE load(z); Put0(Cmp, RH-1, y.r, z.r); DEC(RH)
    END ;
    L := pc + 1;
    IF w.a > 0 THEN PutBc(GT, 0, TRUE)
    ELSIF w.a < 0 THEN PutBc(LT, 0, TRUE)
    ELSE ORS.Mark("zero increment"); PutBc(MI, 0, TRUE)
    END ;
    Store(x, y)
  END For1;

  PROCEDURE For2*(VAR x, y, w: Item);
  BEGIN load(x); DEC(RH); Put1a(Add, x.r, x.r, w.a, FALSE)
  END For2;

  (* Branches, procedure calls, procedure prolog and epilog *)

  PROCEDURE Here*(): LONGINT;
  BEGIN RETURN pc
  END Here;

  PROCEDURE FJump*(VAR L: LONGINT);
  BEGIN Put3c(J, L); L := pc-1
  END FJump;

  PROCEDURE CFJump*(VAR x: Item);
  BEGIN loadCond(x); PutBc(negated[x.r], x.a, TRUE); FixLink(x.b); x.a := pc-1
  END CFJump;

  PROCEDURE BJump*(L: LONGINT);
  BEGIN Put3c(J, L-pc-1)
  END BJump;

  PROCEDURE CBJump*(VAR x: Item; L: LONGINT);
  BEGIN loadCond(x); PutBc(negated[x.r], L-pc-2, TRUE); FixLink(x.b); FixLinkWith(x.a, L)
  END CBJump;

  PROCEDURE Fixup*(VAR x: Item);
  BEGIN FixLink(x.a)
  END Fixup;

  PROCEDURE SaveRegs(r: LONGINT);  (* R[1 .. r-1]*)
    VAR r0: LONGINT;
  BEGIN (*r > 0*) r0 := 1;
    Put1(Sub, SP, SP, (r-1)*4); INC(frame, 4*(r-1));
    REPEAT Put2(Stw, r0, SP, (r-r0-1)*4); INC(r0) UNTIL r0 = r
  END SaveRegs;

  PROCEDURE RestoreRegs(r: LONGINT); (*R[1 .. r-1]*)
    VAR r0: LONGINT;
  BEGIN (*r > 0*) r0 := r;
    REPEAT DEC(r0); Put2(Ldw, r0, SP, (r-r0-1)*4) UNTIL r0 = 1;
    Put1(Add, SP, SP, (r-1)*4); DEC(frame, 4*(r-1))
  END RestoreRegs;

  PROCEDURE PrepCall*(VAR x: Item; VAR r: LONGINT);
  BEGIN (*x.type.form IN {CORB.Proc, CORB.TProc}*)
    IF x.type.form = CORB.TProc THEN DEC(RH) ELSIF x.mode > CORB.Par THEN load(x) END ;
    r := RH;
    IF RH > 1 THEN SaveRegs(RH); RH := 1 END
  END PrepCall;

  PROCEDURE Call*(VAR x: Item; r: LONGINT);
  BEGIN (*x.type.form IN {CORB.Proc, CORB.TProc}*)
    IF x.type.form = CORB.TProc THEN  (*type-bound procedure*)
      IF x.b > 0 THEN (*method call*)
        IF x.b = CORB.Var THEN Put2(Ldw, RH, 0, -8) ELSE Put0(Mov, RH, 0, 1) END ;
        Put2(Ldw, RH, RH, -4-x.a*4); Put3b(Blr, RH, 0)
      ELSE (*super call*)
        IF x.b = 0 THEN Put3c(Bl, (x.a DIV 4)-pc-1)
        ELSE (*imported*) Put3a(Bl, -x.b, x.a, pc-fixorgP); fixorgP := pc-1
        END
      END
    ELSIF x.mode = CORB.Const THEN  (*regular procedure*)
      IF x.a < 0 THEN (*forward*) Put3c(Bl, x.type.len); x.type.len := pc-1  (*fixed up in CORP.Body*)
      ELSIF x.r >= 0 THEN Put3c(Bl, (x.a DIV 4)-pc-1)
      ELSE (*imported*) Put3a(Bl, -x.r, x.a, pc-fixorgP); fixorgP := pc-1
      END
    ELSE  (*installed procedure*)
      IF x.mode <= CORB.Par THEN load(x); DEC(RH)
      ELSE Put2(Ldw, RH, SP, 0); Put1(Add, SP, SP, 4); DEC(r); DEC(frame, 4)
      END ;
      IF check THEN Trap(EQ, 5) END ;
      Put3b(Blr, RH, 0)
    END ;
    IF x.type.base.form = CORB.NoTyp THEN (*procedure*) RH := 1
    ELSE (*function*)
      IF r > 1 THEN Put0(Mov, r, 0, 1); RestoreRegs(r) END ;
      x.mode := Reg; x.r := r; RH := r+1
    END
  END Call;

  PROCEDURE Enter*(parblksize, locblksize: LONGINT; int: BOOLEAN);
    VAR a, r: LONGINT;
  BEGIN frame := 0;
    IF ~int THEN (*procedure prolog*)
      IF locblksize >= C16 THEN ORS.Mark("too many locals") END ;
      a := 4; r := 1;
      Put1(Sub, SP, SP, locblksize); Put2(Stw, LNK, SP, 0);
      currentParlbksize := parblksize;
      WHILE a < parblksize DO Put2(Stw, r, SP, a); INC(r); INC(a, 4) END
    ELSE (*interrupt procedure*)
      Put1(Sub, SP, SP, locblksize); Put2(Stw, 1, SP, 0); Put2(Stw, 2, SP, 4); Put2(Stw, 3, SP, 8)
      (*R1, R2, R3 saved on stack*)
    END
  END Enter;

  PROCEDURE Return*(form: INTEGER; VAR x: Item; size: LONGINT; int: BOOLEAN);
  BEGIN
    IF form # CORB.NoTyp THEN load(x) END ;
    IF ~int THEN (*procedure epilog*)
      Put2(Ldw, LNK, SP, 0); Put1(Add, SP, SP, size); Put3b(Br, LNK, 0)
    ELSE (*interrupt return, restore R3, R2, R1*)
      Put2(Ldw, 3, SP, 8); Put2(Ldw, 2, SP, 4); Put2(Ldw, 1, SP, 0); Put1(Add, SP, SP, size);
      PutRfx;
    END ;
    RH := 1
  END Return;

  (* Case Statements *)

  PROCEDURE CaseHead*(VAR x: Item; VAR L0: LONGINT);
  BEGIN load(x);  (*value of case expression*)
    L0 := pc; Put1(Cmp, RH, x.r, 0);  (*higher bound, fixed up in CaseTail*)
    PutBc(CC, 0, TRUE);  (*branch to else, fixed up in CaseTail*)
    Put1(Add, x.r, x.r, 0);  (*nof words between Bl instruction at L0+6 and jump table, fixed up in CaseTail*)
    Put1(Lsl, x.r, x.r, 2);
    (*L0+6*) Put3c(Bl, 0);  (*LNK := PC+1*)
    Put0(Add, LNK, LNK, x.r); Put3b(Br, LNK, 0); DEC(RH)
  END CaseHead;

  PROCEDURE CaseTail*(L0, L1: LONGINT; n: INTEGER; VAR tab: ARRAY OF LabelRange);  (*L1 = label for else*)
    VAR i, j: INTEGER;
  BEGIN
    IF n > 0 THEN fix1(L0, tab[n-1].high + 1) (*higher bound*) ELSIF L1 = 0 THEN ORS.Mark("empty case") END ;
    IF L1 = 0 THEN L1 := pc; Trap(7, 1) END ;  (*create else*)
    fix(L0+3, L1-L0-4);  (*branch to else*)
    fix1(L0+4, pc-L0-7);  (*nof words between Bl instruction at L0+6 and jump table*)
    j := 0;
    FOR i := 0 TO n-1 DO  (*construct jump table*)
      WHILE j < tab[i].low DO BJump(L1); INC(j) END ;  (*else*)
      WHILE j <= tab[i].high DO BJump(tab[i].label); INC(j) END
    END
  END CaseTail;

  (* In-line code procedures *)

  PROCEDURE Increment*(upordown: LONGINT; VAR x, y: Item);
    VAR op, zr, ldOp, stOp: LONGINT;
  BEGIN (*frame = 0*)
    IF upordown = 0 THEN op := Add ELSE op := Sub END ;
    IF x.type = CORB.byteType THEN
      ldOp := Ldb;
      stOp := Stb;
    ELSE
      ldOp := Ldw;
      stOp := Stw;
    END ;
    IF y.type.form = CORB.NoTyp THEN y.mode := CORB.Const; y.a := 1 END ;
    IF (x.mode = CORB.Var) & (x.r > 0) THEN
      IF x.a <= (currentParlbksize - 4) THEN (* x is parameter *)
        ldOp := Ldw;
        stOp := Stw;
      END ;
      zr := RH; Put2(ldOp, zr, SP, x.a); incR;
      IF y.mode = CORB.Const THEN Put1a(op, zr, zr, y.a, FALSE) ELSE load(y); Put0(op, zr, zr, y.r); DEC(RH) END ;
      Put2(stOp, zr, SP, x.a); DEC(RH)
    ELSE loadAdr(x); zr := RH; Put2(ldOp, RH, x.r, 0); incR;
      IF y.mode = CORB.Const THEN Put1a(op, zr, zr, y.a, FALSE) ELSE load(y); Put0(op, zr, zr, y.r); DEC(RH) END ;
      Put2(stOp, zr, x.r, 0); DEC(RH, 2)
    END
  END Increment;

  PROCEDURE Include*(inorex: LONGINT; VAR x, y: Item);
    VAR op, zr: LONGINT;
  BEGIN loadAdr(x); zr := RH; Put2(Ldw, RH, x.r, 0); incR;
    IF inorex = 0 THEN op := Ior ELSE op := Ann END ;
    IF y.mode = CORB.Const THEN Put1a(op, zr, zr, LSL(1, y.a), FALSE)
    ELSE load(y); Put1(Mov, RH, 0, 1); Put0(Lsl, y.r, RH, y.r); Put0(op, zr, zr, y.r); DEC(RH)
    END ;
    Put2(Stw, zr, x.r, 0); DEC(RH, 2)
  END Include;

  PROCEDURE Assert*(VAR x: Item);
    VAR cond: LONGINT;
  BEGIN loadCond(x);
    IF x.a = 0 THEN cond := negated[x.r]
    ELSE PutBc(x.r, x.b, TRUE); FixLink(x.a); x.b := pc-1; cond := 7
    END ;
    Trap(cond, 7); FixLink(x.b)
  END Assert;

  PROCEDURE New*(VAR x, y: Item);
    VAR z: Item; xt: CORB.Type; xf: INTEGER;
  BEGIN loadAdr(x);
    IF y.type = CORB.noType THEN (*record*) loadTypTagAdr(x.type.base)
    ELSE (*array*) xt:= x.type.base.base; xf := xt.form;
      IF xf = CORB.Record THEN loadTypTagAdr(xt); Put1(Add, RH-1, RH-1, 1)  (*array of record => blktyp = 1*)
      ELSIF xf = CORB.Pointer THEN Put1(Mov, RH, 0, 2); incR  (*array of pointer => blktyp = 2*)
      ELSIF xf = CORB.Proc THEN Put1(Mov, RH, 0, 7); incR  (*array of procedure => blktyp = 3, tag = 7*)
      ELSIF xf < CORB.Pointer THEN Put1(Mov, RH, 0, 3); incR  (*array of basic type, blktyp = 3, tag = 3*)
      ELSE ORS.Mark("no valid ptr base type")
      END ;
      IF y.mode = CORB.Const THEN
        IF y.a > 0 THEN load(y) (*len*) ELSE ORS.Mark("not a valid dyn array length") END
      ELSE load(y); (*len*)
        IF check THEN Trap(LE, 1) END
      END ;
      z.mode := CORB.Const; z.type := CORB.intType; z.a := xt.size; load(z) (*elemsize*)
    END ;
    Trap(7, 0); RH := 1
  END New;

  PROCEDURE Pack*(VAR x, y: Item);
    VAR z: Item;
  BEGIN z := x; load(x); load(y);
    Put1(Lsl, y.r, y.r, 23); Put0(Add, x.r, x.r, y.r); DEC(RH); Store(z, x)
  END Pack;

  PROCEDURE Unpk*(VAR x, y: Item);
    VAR z, e0: Item;
  BEGIN  z := x; load(x); e0.mode := Reg; e0.r := RH; e0.type := CORB.intType;
    Put1(Sar, RH, x.r, 23); Put1(Sub, RH, RH, 127); Store(y, e0); incR;
    Put1(Lsl, RH, RH, 23); Put0(Sub, x.r, x.r, RH); Store(z, x)
  END Unpk;

  PROCEDURE Led*(VAR x: Item);
  BEGIN load(x); Put1a(Mov, RH, 0, boardIOAddr, TRUE); Put2(Stw, x.r, RH, 0); DEC(RH)
  END Led;

  PROCEDURE Get*(VAR x, y: Item);
  BEGIN load(x); x.type := y.type; x.mode := RegI; x.a := 0; Store(y, x)
  END Get;

  PROCEDURE Put*(VAR x, y: Item);
  BEGIN load(x); x.type := y.type; x.mode := RegI; x.a := 0; Store(x, y)
  END Put;

  PROCEDURE Copy*(VAR x, y, z: Item);
  BEGIN load(x); load(y);
    IF z.mode = CORB.Const THEN
      IF z.a > 0 THEN load(z) ELSE ORS.Mark("bad count") END
    ELSE load(z);
      IF check THEN Trap(LT, 3) END ;
      PutBc(EQ, 6, TRUE)
    END ;
    Put2(Ldw, RH, x.r, 0); Put1(Add, x.r, x.r, 4);
    Put2(Stw, RH, y.r, 0); Put1(Add, y.r, y.r, 4);
    Put1(Sub, z.r, z.r, 1); Put3(Bc, NE, z.r, 0, -6, FALSE); DEC(RH, 3)
  END Copy;

  PROCEDURE LDPSR*(VAR x: Item);
  BEGIN (*x.mode = Const*)  Put3b(Br, x.a, 15 * C8 + STI MOD C8)
  END LDPSR;

  PROCEDURE LDREG*(VAR x, y: Item);
  BEGIN
    IF (x.a <= maxRegister) & (x.a >= 0) THEN 
        IF y.mode = CORB.Const THEN Put1a(Mov, x.a, 0, y.a, TRUE)
        ELSE load(y); Put0(Mov, x.a, 0, y.r); DEC(RH)
        END
    ELSE ORS.Mark("valid registers are 0 through 31")
    END
  END LDREG;

  (* In-line code functions *)

  PROCEDURE Abs*(VAR x: Item);
  BEGIN
    IF x.mode = CORB.Const THEN x.a := ABS(x.a)
    ELSE load(x);
      IF x.type.form = CORB.Real THEN Put1(Ldhi, RH, 0, 7FFFH); Put1(Ior, RH, RH, 0FFFFH); Put0(And, x.r, x.r, RH)
      ELSE Put1(Cmp, x.r, x.r, 0); Put3(Bc, GE, x.r, 0, 2, FALSE); Put1(Mov, RH, 0, 0); Put0(Sub, x.r, RH, x.r)
      END
    END
  END Abs;

  PROCEDURE Odd*(VAR x: Item);
  BEGIN load(x); Put1(And, x.r, x.r, 1); SetCC(x, NE); DEC(RH)
  END Odd;

  PROCEDURE Floor*(VAR x: Item);
  BEGIN load(x); Put0a(CF2I, 0, x.r, x.r)
  END Floor;

  PROCEDURE Float*(VAR x: Item);
  BEGIN load(x); Put0a(CI2F, 0, x.r, x.r)
  END Float;

  PROCEDURE Ord*(VAR x: Item);
  BEGIN
    IF x.mode IN {CORB.Var, CORB.Par, RegI, Cond} THEN load(x) END
  END Ord;

  PROCEDURE Len*(VAR x: Item);
  BEGIN
    IF x.type.len >= 0 THEN
      IF x.mode = RegI THEN DEC(RH) END ;
      x.mode := CORB.Const; x.a := x.type.len
    ELSIF x.type.size > 0 THEN (*open array param*)
      Put2(Ldw, RH, SP, x.a + 4 + frame); x.mode := Reg; x.r := RH; incR
    ELSE (*dynamic open array*) Put2(Ldw, x.r, x.r, -16); (*len*) x.mode := Reg
    END 
  END Len;

  PROCEDURE Shift*(fct: LONGINT; VAR x, y: Item);
    VAR op, ya, shift: LONGINT;
  BEGIN load(x);
    IF fct = 0 THEN op := Lsl ELSIF fct = 1 THEN op := Sar ELSE op := Ror END ;
    IF op = Ror THEN
      (* ROR(x,n) := (x >> y) | (x << (32 - y)) *)
      IF y.mode = CORB.Const THEN
        ya := y.a MOD maxSet; IF ya < 0 THEN ya := ya + maxSet END ;
        Put1(Lsl, RH, x.r, 32 - ya); (* x << (32 - y) *)
        (* Slr fills the top bits in with zero *)
        Put1(Slr, x.r, x.r, ya); (* x >> y *)
        Put0(Ior, x.r, x.r, RH);
      ELSE load(y); 
        Put1(Add, RH, 0, 32); Put0(Sub, RH, RH, y.r); (* RH := 32 - y *)
        Put0(Lsl, RH, x.r, RH); (* x << (32 - y) *)
        Put0(Slr, x.r, x.r, y.r); (* x >> y *)
        Put0(Ior, RH-2, x.r, RH); DEC(RH); x.r := RH-1
      END
    ELSE
      IF y.mode = CORB.Const THEN Put1(op, x.r, x.r, y.a MOD maxSet)
      ELSE load(y); Put0(op, RH-2, x.r, y.r); DEC(RH); x.r := RH-1
      END
    END
  END Shift;

  (*TODO: Add carry flag*)
  PROCEDURE ADC*(VAR x, y: Item);
  BEGIN load(x); load(y); Put0(Add+U, x.r, x.r, y.r); DEC(RH)
  END ADC;

  (*TODO: Subtract carry flag*)
  PROCEDURE SBC*(VAR x, y: Item);
  BEGIN load(x); load(y); Put0(Sub+U, x.r, x.r, y.r); DEC(RH)
  END SBC;

  PROCEDURE UML*(VAR x, y: Item);
  BEGIN load(x); load(y); Put0(Mulu, x.r, x.r, y.r); DEC(RH)
  END UML;

  PROCEDURE Bit*(VAR x, y: Item);
  BEGIN load(x); Put2(Ldw, x.r, x.r, 0); CheckBit(x, y); SetCC(x, MI)
  END Bit;

  PROCEDURE Register*(VAR x: Item);
  BEGIN (*x.mode = Const*)
    IF (x.a <= maxRegister) & (x.a >= 0) THEN
        Put0(Mov, RH, 0, x.a); x.mode := Reg; x.r := RH; incR
    ELSE ORS.Mark("valid registers are 0 through 31")
    END
  END Register;

  (*
    TODO: v=0 -> R.a := H; v=1 -> R.a := [N, Z, C, V]
    The MUL instruction deposits the high 32 bits of the product in the auxiliary register H. 
    The DIV instruction deposits the remainder in H.
    H(0) used by InnerCore/txt/Disk.Mod.txt to get remainder
    H(1) used by InnerCore/txt/Disk.Mod.txt Tools.Id
  *)
  PROCEDURE H*(VAR x: Item);
  BEGIN (*x.mode = Const*)
    (*Put0(Mov + U + x.a MOD 2 * V, RH, 0, 0);*) 
    Put0(Mov, RH, 0, 0);
    x.mode := Reg; x.r := RH; incR;
  END H;

  PROCEDURE Adr*(VAR x: Item);
  BEGIN 
    IF x.mode IN {CORB.Var, CORB.Par, RegI} THEN loadAdr(x)
    ELSIF (x.mode = CORB.Const) & (x.type.form = CORB.Proc) THEN load(x)
    ELSIF (x.mode = CORB.Const) & (x.type.form = CORB.String) THEN loadStringAdr(x)
    ELSE ORS.Mark("not addressable")
    END
  END Adr;

  PROCEDURE GETPSW*(VAR x: Item);
  BEGIN
    code[pc] := (Mvfs * C10 + RH) * C16 + 0;
    INC(pc);
    Put2(Stw, RH, SP, x.a + frame)
  END GETPSW;

  PROCEDURE SETPSW*(VAR x: Item);
  BEGIN
    load(x);
    code[pc] := (Mvts * C10 + RH-1) * C16 + 0;
    INC(pc);
    DEC(RH)
  END SETPSW;

  PROCEDURE CCTL*(VAR x: Item);
  BEGIN
    code[pc] := Cctl * C26 + x.a;
    INC(pc);
  END CCTL;

  PROCEDURE Condition*(VAR x: Item);
  BEGIN (*x.mode = Const*) SetCC(x, x.a)
  END Condition;

  PROCEDURE Open*(v: INTEGER);
  BEGIN pc := 0; strx := 0; tdw := 0; RH := 1; fixorgP := 0; fixorgD := 0; fixorgT := 0; fixorgM := 0; check := v # 0; version := v;
    IF v = 0 THEN pc := 1;
      REPEAT code[pc] := 0; INC(pc) UNTIL pc = 8
    END
  END Open;

  PROCEDURE SetDataSize*(dc: LONGINT);
  BEGIN varx := dc
  END SetDataSize;

  PROCEDURE Header*;
  BEGIN entry := pc*4;
    IF version = 0 THEN code[0] := BCT - 1 + pc;  Put1a(Mov, SP, 0, StkOrg0, TRUE)  (*RISC-0*)
    ELSE Put1(Sub, SP, SP, 4); Put2(Stw, LNK, SP, 0)
    END
  END Header;

  PROCEDURE NofRefs(ftyp: SET; typ: CORB.Type): LONGINT;
    VAR fld: CORB.Object; n: LONGINT;
  BEGIN
    IF typ.form IN ftyp THEN n := 1
    ELSIF typ.form = CORB.Record THEN fld := typ.dsc; n := 0;
      WHILE fld # NIL DO n := NofRefs(ftyp, fld.type) + n; fld := fld.next END
    ELSIF typ.form = CORB.Array THEN n := NofRefs(ftyp, typ.base) * typ.len
    ELSE n := 0
    END ;
    RETURN n
  END NofRefs;

  PROCEDURE FindRefs(VAR R: Files.Rider; ftyp: SET; typ: CORB.Type; off: LONGINT);
    VAR fld: CORB.Object; i, s: LONGINT;
  BEGIN
    IF typ.form IN ftyp THEN CrossUtil.WriteIntBE(R, off)
    ELSIF typ.form = CORB.Record THEN fld := typ.dsc;
      WHILE fld # NIL DO FindRefs(R, ftyp, fld.type, fld.val + off); fld := fld.next END
    ELSIF typ.form = CORB.Array THEN s := typ.base.size;
      FOR i := 0 TO typ.len-1 DO FindRefs(R, ftyp, typ.base, i*s + off) END
    END
  END FindRefs;

  PROCEDURE Close*(VAR modid: ORS.Ident; key, nofent: LONGINT);
    VAR obj: CORB.Object;
      i, comsize, nofimps, nofrefs, size, tdx, base: LONGINT;
      name: ORS.Ident;
      F: Files.File; R: Files.Rider;
  BEGIN  (*exit code*)
    IF version = 0 THEN Put1a(Mov, 1, 0, 0C0000000H, TRUE); Put3b(Br, 1, 0)  (*RISC-0*)
    ELSE Put2(Ldw, LNK, SP, 0); Put1(Add, SP, SP, 4); Put3b(Br, LNK, 0)
    END ;
    obj := CORB.topScope.next; nofimps := 0; comsize := 4; nofrefs := 0; tdx := varx + strx;
    WHILE obj # NIL DO
      IF (obj.class = CORB.Mod) & (obj.dsc # CORB.system) THEN INC(nofimps)  (*count imports*)
      ELSIF (obj.exno # 0) & (obj.class = CORB.Const) & (obj.type.form = CORB.Proc)
          & (obj.type.nofpar = 0) & (obj.type.base = CORB.noType) THEN i := 0;  (*count commands*)
        WHILE obj.name[i] # 0X DO INC(i) END ;
        i := (i+4) DIV 4 * 4; INC(comsize, i+4)
      ELSIF obj.class = CORB.Var THEN INC(nofrefs, NofRefs(CORB.Ptrs + CORB.Procs, obj.type))  (*count ptrs and pvrs*)
      ELSIF (obj.class = CORB.Typ) & (obj.type.form = CORB.Record) & (obj.lev = 0) THEN  (*build type descriptors*)
        i := obj.type.len;  (*heading of fixup chain of instruction pairs generated in loadTypTagAdr*)
        BuildTD(obj.type, tdw);  (*obj.type.len now used as type descriptor offset in bytes relative to tdx = varx + strx*)
        IF i > 0 THEN FixLinkPair(i, tdx + obj.type.len) END  (*fix chain of instruction pairs with type descriptor adr*)
      END ;
      obj := obj.next
    END ;
    size := tdx + tdw*4 + comsize + (pc + nofimps + nofent + nofrefs + 2)*4;
    CORB.MakeFileName(name, modid, ".rsc");  (*write code file*)
    F := Files.New(name); Files.Set(R, F, 0); Files.WriteString(R, modid); CrossUtil.WriteIntBE(R, key); Files.Write(R, CHR(version));
    CrossUtil.WriteIntBE(R, size);
    obj := CORB.topScope.next;
    WHILE (obj # NIL) & (obj.class = CORB.Mod) DO  (*imports*)
      IF obj.dsc # CORB.system THEN Files.WriteString(R, obj(CORB.Module).orgname); CrossUtil.WriteIntBE(R, obj.val) END ;
      obj := obj.next
    END ;
    Files.Write(R, 0X);
    CrossUtil.WriteIntBE(R, varx);  (*variable space*)
    CrossUtil.WriteIntBE(R, strx);
    FOR i := 0 TO strx-1 DO Files.Write(R, str[i]) END ;  (*strings*)
    CrossUtil.WriteIntBE(R, tdw*4);
    FOR i := 0 TO tdw-1 DO CrossUtil.WriteIntBE(R, td[i]) END ;  (*type descriptors*)
    CrossUtil.WriteIntBE(R, pc);  (*code len*)
    FOR i := 0 TO pc-1 DO  (*program*)
      CrossUtil.WriteIntBE(R, code[i])
    END ;
    obj := CORB.topScope.next;
    WHILE obj # NIL DO  (*commands*)
      IF (obj.exno # 0) & (obj.class = CORB.Const) & (obj.type.form = CORB.Proc) &
          (obj.type.nofpar = 0) & (obj.type.base = CORB.noType) THEN
        Files.WriteString(R, obj.name); CrossUtil.WriteIntBE(R, obj.val)
      END ;
      obj := obj.next
    END ;
    Files.Write(R, 0X);
    CrossUtil.WriteIntBE(R, nofent); CrossUtil.WriteIntBE(R, entry);
    obj := CORB.topScope.next;
    WHILE obj # NIL DO  (*entries*)
      IF obj.exno # 0 THEN
        IF  obj.class = CORB.Const THEN
          IF obj.type.form = CORB.String THEN CrossUtil.WriteIntBE(R, varx + obj.val MOD C20)  (*convert strx to SB-relative*)
          ELSIF obj.type.form = CORB.Proc THEN CrossUtil.WriteIntBE(R, obj.val)
          ELSIF obj.type.form = CORB.TProc THEN (*dummy to preserve linear order of exno*) CrossUtil.WriteIntBE(R, obj.dsc.val)
          END
        ELSIF obj.class = CORB.Typ THEN
          IF obj.type.form = CORB.Record THEN CrossUtil.WriteIntBE(R, tdx + obj.type.len MOD C16)
          ELSIF (obj.type.form = CORB.Pointer) & ((obj.type.base.typobj = NIL) OR (obj.type.base.typobj.exno = 0)) THEN
            CrossUtil.WriteIntBE(R, tdx + obj.type.base.len MOD C16)
          END
        ELSIF obj.class = CORB.Var THEN CrossUtil.WriteIntBE(R, obj.val)
        END
      END ;
      obj := obj.next
    END ;
    obj := CORB.topScope.next;
    WHILE obj # NIL DO  (*pointer variables*)
      IF obj.class = CORB.Var THEN FindRefs(R, CORB.Ptrs, obj.type, obj.val) END ;
      obj := obj.next
    END ;
    CrossUtil.WriteIntBE(R, -1);
    obj := CORB.topScope.next;
    WHILE obj # NIL DO  (*procedure variables*)
      IF obj.class = CORB.Var THEN FindRefs(R, CORB.Procs, obj.type, obj.val) END ;
      obj := obj.next
    END ;
    CrossUtil.WriteIntBE(R, -1);
    CrossUtil.WriteIntBE(R, fixorgP); CrossUtil.WriteIntBE(R, fixorgD); CrossUtil.WriteIntBE(R, fixorgT); CrossUtil.WriteIntBE(R, fixorgM);
    CrossUtil.WriteIntBE(R, entry);
    Files.Write(R, "O"); Files.Register(F)
  END Close;

BEGIN
  negatedf[EQF] := NEF; negatedf[NEF] := EQF; negatedf[LTF] := GEF; negatedf[GEF] := LTF; negated[LEF] := GTF; negated[GTF] := LEF; 
  negated[EQ] := NE; negated[NE] := EQ; negated[CS] := CC; negated[CC] := CS; negated[LT] := GE; negated[GE] := LT; 
  negated[LE] := GT; negated[GT] := LE; negated[7] := 15; negated[15] := 7;
  relmap[0] := EQ; relmap[1] := NE; relmap[2] := LT; relmap[3] := LE; relmap[4] := GT; relmap[5] := GE
END CORG.
