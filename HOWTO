
HOWTO - aka "What can I do with this stuff?"
============================================


Preparations
------------

0) Requirements
   Linux (tested on Ubuntu 16 and 18), X11 Window System
   Monitor capable of displaying 1024x768 pixels in a window
   For FPGA experiments: Altera/Terasic DE2-115 board

1) In any case, run "make" in the top-level directory.
   This will build the simulator and a bunch of tools.
   All executables are collected in build/bin. Here is
   the list with a short description of each of them:
     sim		RISC5 simulator
     cmpx		compare two files (hex output)
     mem2bin		convert memory to binary format
     mkdisk		make "disk" for Oberon (a file in the host system)
     serlink		serial communication with a running Oberon system
     showobj		show contents of RISC5 object file
     showsym		show contents of symbol file
     dos2oberon		convert line endings of DOS file to Oberon file
     oberon2dos		convert line endings of Oberon file to DOS file
     unix2oberon	convert line endings of UNIX file to Oberon file
     oberon2unix	convert line endings of Oberon file to UNIX file
     asm		an experimental RISC5 assembler
   Errors in this stage are often due to not running Linux,
   or missing X11 development libraries.


Working with RISC5
------------------

2) Installing Oberon on a simulated RISC5 system
   Prerequisites: 1) above
   Change your working directory to kit/install/sim, then type
   "make", and follow the instructions. You will get a bootable
   Oberon disk (named "Oberon.dsk"). Make a backup copy of it.
   Then you may clean up with "make clean". Don't forget to rename
   (or copy again) the backup to a working Oberon disk with name
   "Oberon.dsk" in the directory kit/install/sim.

3) Re-building the Oberon distribution kit on a simulated RISC5 system
   Prerequisites: 2) above
   Change your working directory to kit/rebuild/sim, then type
   "make", and follow the instructions. You will get a file tree
   "kit/New", which contains the sources (copied) as well as the
   re-generated binaries. "New" should compare equal to the "Stable"
   tree. This can be checked by doing a "make check". You can clean
   up the rebuild directory with "make clean". This does not delete
   the "New" directory.

4) Installing Oberon on an FPGA-based RISC5 system
   Prerequisites: 1) above
   Change your working directory to kit/install/fpga, then type "make",
   and follow the instructions. Use "fpga/v1/syn/build/risc5.svf" as the
   configuration file for the FPGA. You will get a bootable SD card which
   contains the Oberon system as loadable modules. If you need the sources,
   you have to transfer them to the SD card as described by typing "make",
   using "PCLink2.Run" on the Oberon side and "make run-link" on the PC.

5) Re-building the Oberon distribution kit on an FPGA-based RISC5 system
   Prerequisites: 4) above
   Change your working directory to kit/rebuild/fpga, then type
   "make", and follow the instructions. You will get a file tree
   "kit/New", which contains the sources (copied) as well as the
   re-generated binaries. "New" should compare equal to the "Stable"
   tree. This can be checked by doing a "make check". Note that there
   is currently a small discrepancy in the Math.rsc file, due to the
   fact that the FPU hardware does not conform to IEEE 754, in contrast
   to the simulator, which does. You can clean up the rebuild directory
   with "make clean". This does not delete the "New" directory.

