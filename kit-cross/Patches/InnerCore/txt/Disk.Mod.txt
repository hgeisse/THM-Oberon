MODULE Disk;

  IMPORT SYSTEM;

  CONST
    SectorLength* = 1024;
    mapsize = 1000H; (* 4K * 1K sectors = 4MB *)
    (* SD card *)
    SDCctrl = 0F0600000H;
    SDCdata = 0F0600004H;
    SDCcrc7 = 0F0600008H;
    SDCcrc16 = 0F060000CH;
    SDCselect = 0;
    SDCfastclk = 1;
    SDCcrc16miso = 2;
    SDCready = 0;
    StartBlockToken = 0FEH;

  TYPE
    Sector* = ARRAY SectorLength OF BYTE;

  VAR
    NofSectors*: INTEGER;
    sectorMap: ARRAY mapsize DIV 32 OF SET;

  (*----------------------------------------------------------*)

  PROCEDURE SndRcv(b: INTEGER): INTEGER;
    VAR r: INTEGER;
  BEGIN
    SYSTEM.PUT(SDCdata, b);
    REPEAT
    UNTIL SYSTEM.BIT(SDCctrl, SDCready);
    SYSTEM.GET(SDCdata, r);
    RETURN r
  END SndRcv;

  PROCEDURE ReadBlock(src, dst: INTEGER);
    (* read a single 512-byte SD card block,
       src: block #, dst: address of buffer *)
    VAR i, r, crc: INTEGER;
        cmd: ARRAY 5 OF BYTE;
        b: BYTE;
  BEGIN
    cmd[0] := 051H;
    cmd[1] := (src DIV 01000000H) MOD 256;
    cmd[2] := (src DIV 00010000H) MOD 256;
    cmd[3] := (src DIV 00000100H) MOD 256;
    cmd[4] := src MOD 256;
    (* select *)
    SYSTEM.PUT(SDCctrl, { SDCfastclk, SDCselect });
    (* send command *)
    SYSTEM.PUT(SDCcrc7, 01H);
    FOR i := 0 TO 4 DO
      r := SndRcv(cmd[i]);
    END;
    SYSTEM.GET(SDCcrc7, crc);
    r := SndRcv(crc);
    (* receive answer *)
    i := 8;
    REPEAT
      r := SndRcv(0FFH);
      DEC(i);
    UNTIL (r # 0FFH) OR (i = 0);
    IF i = 0 THEN
      (* no answer *)
      LED(0F1H);
      REPEAT UNTIL FALSE;
    ELSE
      (* wait for start block token *)
      i := 2048;
      REPEAT
        r := SndRcv(0FFH);
        DEC(i);
      UNTIL (r = StartBlockToken) OR (i = 0);
      IF i = 0 THEN
        (* no start block token *)
        LED(0F2H);
        REPEAT UNTIL FALSE;
      ELSE
        (* reset CRC *)
        SYSTEM.PUT(SDCctrl, { SDCcrc16miso, SDCfastclk, SDCselect });
        SYSTEM.PUT(SDCcrc16, 0000H);
        (* receive data bytes *)
        FOR i := 0 TO 511 DO
          b := SndRcv(0FFH);
          SYSTEM.PUT(dst + i, b);
        END;
        (* receive CRC *)
        r := SndRcv(0FFH);
        r := SndRcv(0FFH);
        SYSTEM.GET(SDCcrc16, crc);
        (* deselect *)
        SYSTEM.PUT(SDCctrl, { SDCfastclk });
        r := SndRcv(0FFH);
        (* check CRC *)
        IF crc # 0 THEN
          (* CRC error *)
          LED(0F3H);
          REPEAT UNTIL FALSE;
        END;
      END;
    END;
  END ReadBlock;

  PROCEDURE WriteBlock(dst, src: INTEGER);
    (* dst: block #, src: address of buffer *)
    VAR i, r, crc: INTEGER;
        cmd: ARRAY 5 OF BYTE;
        b: BYTE;
  BEGIN
    cmd[0] := 058H;
    cmd[1] := (dst DIV 01000000H) MOD 256;
    cmd[2] := (dst DIV 00010000H) MOD 256;
    cmd[3] := (dst DIV 00000100H) MOD 256;
    cmd[4] := dst MOD 256;
    (* select *)
    SYSTEM.PUT(SDCctrl, { SDCfastclk, SDCselect });
    (* send command *)
    SYSTEM.PUT(SDCcrc7, 01H);
    FOR i := 0 TO 4 DO
      r := SndRcv(cmd[i]);
    END;
    SYSTEM.GET(SDCcrc7, crc);
    r := SndRcv(crc);
    (* receive answer *)
    i := 8;
    REPEAT
      r := SndRcv(0FFH);
      DEC(i);
    UNTIL (r # 0FFH) OR (i = 0);
    IF i = 0 THEN
      (* no answer *)
      LED(0F4H);
      REPEAT UNTIL FALSE;
    ELSE
      (* send start block token *)
      r := SndRcv(StartBlockToken);
      (* reset CRC *)
      SYSTEM.PUT(SDCctrl, { SDCfastclk, SDCselect });
      SYSTEM.PUT(SDCcrc16, 0000H);
      (* send data bytes *)
      FOR i := 0 TO 511 DO
        SYSTEM.GET(src + i, b);
        r := SndRcv(b);
      END;
      (* send CRC *)
      SYSTEM.GET(SDCcrc16, crc);
      r := SndRcv((crc DIV 256) MOD 256);
      r := SndRcv(crc MOD 256);
      (* receive data response token *)
      REPEAT
        r := SndRcv(0FFH);
      UNTIL r # 0FFH;
      IF (r MOD 020H) # 005H THEN
        (* rejected *)
        LED(0F5H);
        REPEAT UNTIL FALSE;
      ELSE
        (* wait while busy *)
        REPEAT
          r := SndRcv(0FFH);
        UNTIL r # 000H;
        (* deselect *)
        SYSTEM.PUT(SDCctrl, { SDCfastclk });
        r := SndRcv(0FFH);
      END;
    END;
  END WriteBlock;

  (*----------------------------------------------------------*)

  PROCEDURE InitSecMap*;
    VAR
      i: INTEGER;
  BEGIN
    NofSectors := 0;
    sectorMap[0] := {0 .. 31};
    sectorMap[1] := {0 .. 31};
    FOR i := 2 TO mapsize DIV 32 - 1 DO
      sectorMap[i] := {}
    END
  END InitSecMap;

  PROCEDURE MarkSector*(sec: INTEGER);
  BEGIN
    ASSERT((sec MOD 29) = 0);
    sec := sec DIV 29;
    INCL(sectorMap[sec DIV 32], sec MOD 32);
    INC(NofSectors)
  END MarkSector;

  PROCEDURE FreeSector*(sec: INTEGER);
  BEGIN
    ASSERT((sec MOD 29) = 0);
    sec := sec DIV 29;
    EXCL(sectorMap[sec DIV 32], sec MOD 32);
    DEC(NofSectors)
  END FreeSector;

  PROCEDURE AllocSector*(hint: INTEGER; VAR sec: INTEGER);
    VAR
      s: INTEGER;
  BEGIN
    (* find free sector, starting after hint *)
    ASSERT((hint MOD 29) = 0);
    hint := hint DIV 29;
    s := hint;
    REPEAT
      INC(s);
      IF s = mapsize THEN
        s := 1
      END;
    UNTIL ~(s MOD 32 IN sectorMap[s DIV 32]);
    INCL(sectorMap[s DIV 32], s MOD 32);
    INC(NofSectors);
    sec := s * 29
  END AllocSector;

  PROCEDURE GetSector*(src: INTEGER; VAR dst: Sector);
  BEGIN
    ASSERT((src MOD 29) = 0);
    src := src DIV 29;
    src := src * 2;
    ReadBlock(src, SYSTEM.ADR(dst));
    ReadBlock(src + 1, SYSTEM.ADR(dst) + 512)
  END GetSector;

  PROCEDURE PutSector*(dst: INTEGER; VAR src: Sector);
  BEGIN
    ASSERT((dst MOD 29) = 0);
    dst := dst DIV 29;
    dst := dst * 2;
    WriteBlock(dst, SYSTEM.ADR(src));
    WriteBlock(dst + 1, SYSTEM.ADR(src) + 512)
  END PutSector;

  PROCEDURE Init*;
  BEGIN
    InitSecMap
  END Init;

END Disk.
