
There are at least three different methods to define
division (DIV) and remainder (MOD) with negative
operands. For all of them the following implication
must hold:

(q = a DIV b) AND (r = a MOD b)  =>  (a = q * b + r)

Furthermore, in order to make the result unique, the
following relation must hold:

abs(a MOD b) < abs(b)


Definition 1
------------

 14 :  3 =  4 R  2		 12 :  3 =  4 R 0
-14 :  3 = -4 R -2		-12 :  3 = -4 R 0
 14 : -3 = -4 R  2		 12 : -3 = -4 R 0
-14 : -3 =  4 R -2		-12 : -3 =  4 R 0

(Remainder has the same sign as the dividend.)


Definition 2
------------

 14 :  3 =  4 R  2		 12 :  3 =  4 R 0
-14 :  3 = -5 R  1		-12 :  3 = -4 R 0
 14 : -3 = -5 R -1		 12 : -3 = -4 R 0
-14 : -3 =  4 R -2		-12 : -3 =  4 R 0

(Remainder has the same sign as the divisor.)


Definition 3
------------

 14 :  3 =  4 R  2		 12 :  3 =  4 R 0
-14 :  3 = -5 R  1		-12 :  3 = -4 R 0
 14 : -3 = -4 R  2		 12 : -3 = -4 R 0
-14 : -3 =  5 R  1		-12 : -3 =  4 R 0

(Remainder is always non-negative.)


Remarks
-------

1) The "typical C implementation" uses Definition 1.

2) RISC5 (used for Oberon) behaves a little weird:

 14 :  3 =  4 R  2		 12 :  3 =  4 R  0
-14 :  3 = -5 R  1		-12 :  3 = -4 R  0
 14 : -3 = -6 R -4		 12 : -3 = -6 R -6
-14 : -3 =  5 R  1		-12 : -3 =  5 R  3

My guess is that definition 3 above would fit best.

