
Here is a brief decsription of each of the ECO32 I/O devices:


Timer
-----

The timer is realized with a counter ('timer counter register'), which
can be read. It counts downward (counting frequency 50 MHz), starting
with a preset value ('timer divisor register') down to zero. As soon as
zero is reached, a flag in the control register ('expired') is set, and
possibly an interrupt is generated. Also, the counter is re-initialized
to the value of the timer divisor register. The 'expired' flag is reset
upon reading the control register.

0xF0000000	timer control register (r/w)
		bit 0: timer expired (cannot be written)
		bit 1: timer interrupt enabled
		reading the control register resets the 'expired' flag

0xF0000004	timer divisor register (r/w)
		writing to this register also writes to the counter register

0xF0000008	timer counter register (r)
		this register cannot be written


Board I/O
---------

The board I/O realizes the most primitive user interactions: pressing
a button, flipping a switch, and lighting a LED.

0xF1000000	buttons, switches, and LEDs (r/w)
		reading returns 4 buttons and 8 switches in the 12 LSBs
		writing maps the 8 LSBs to the LEDs (1 = on)


RS232
-----

This device provides bi-directional serial communication. The communication
parameters are 8N1 (8 data bits, no parity, 1 stop bit), and the line speed
is fixed at 9600 baud.

0xF0300000	receiver control register (r/w)
		bit 0: receiver has a character (cannot be written)
		bit 1: enable receiver interrupt (not yet in HYBRID)

0xF0300004	receiver data register (r)
		reading this register clears the 'rcvr has a char' flag
		this register cannot be written

0xF0300008	transmitter control register (r/w)
		bit 0: transmitter accepts a character (cannot be written)
		bit 1: enable transmitter interrupt (not yet in HYBRID)

0xF030000C	transmitter data register (w)
		writing this register clears the 'xmtr accepts a char' flag
		this register cannot be read


SD Card
-------

This interface uses the SD card's SPI mode (mode 0, i.e. CPOL=0, CPHA=0).
The interface is neither a "bit banging" nor a high level block-oriented
design, but something in between: you have to send the various commands
for the SD card by software, but the low-level tasks (shifting the bits,
computing command and data CRCs) are implemented in hardware.

Some basic facts: SPI is a synchronous bit-serial interface where the
master supplies the clock. Data is always tansferred in both directions
(both, the master as well as the slave, have shift registers, which are
connected in a ring). The interface to the card uses four lines:
  MISO		master in, slave out
  MOSI		master out, slave in
  SCLK		serial clock
  SS		slave select
For details, see:
  https://en.wikipedia.org/wiki/Serial_Peripheral_Interface

The SD card protocol on top of SPI is rather complicated, see:
  https://en.wikipedia.org/wiki/SD_card    (an introduction)
  https://www.sdcard.org/downloads/pls     (the real thing)
The specification must be followed exactly, otherwise communication
with the card is impossible.

0xF0600000	command/status register (r/w)
		When read, this register presents the interface status:
		bit 0: ready (a transmission cycle may start)
		bit 1: write protect (the card's switch state is "locked")
		When written, the following bits control the interface:
		bit 0: 0 = slave deselected, 1 = slave selected
		bit 1: 0 = slow clock (), 1 = fast clock ()
		bit 2: 0 = crc16 input from MOSI, 1 = crc16 input from MISO

0xF0600004	data register (r/w)
		This is the master's shift register. The data is located
		in the 8 rightmost bits of the word. The register may
		only be written if the status bit "ready" allows that.
		When the register is written, ready is cleared, and
		a transmission cycle starts. When the cycle ends (this
		is again indicated by ready), the byte received from
		the slave can be read.

0xF0600008	CRC7 register (r/w)
		This is the CRC register for commands. It can be read
		as well as written (i.e. initialized) by software. The
		CRC value is located in the 8 rightmost bits of the word,
		and is computed from the MOSI bits leaving the master.

0xF060000C	CRC16 register (r/w)
		This is the CRC register for data. It can be read as
		well as written (i.e. initialized) by software. The CRC
		value is located in the 16 rightmost bits of the word,
		and is computed either from the MOSI bits leaving the
		master, or from the MISO bits entering the master. Bit 2
		in the command register controls the source (0 = input
		from MOSI, 1 = input from MISO).

Note: The ECO32 project on GitHub
  https://github.com/hgeisse/eco32
has 512-byte block ("sector") read/write routines in the subdirectory
monitor/monitor/common (in file dsksdc.c).


Keyboard
--------

t.b.d.


Mouse
-----

t.b.d.


Graphics 2
----------

The graphics display is a framebuffer device. The base address of
the buffer is 0xF5000000. The display occupies 0x18000 bytes, which
is 0x6000 (24576) words. This equals a total of 786432 bits, each
bit representing a single pixel of the 1024x768 pixel display.
Bit value 0 means 'background color'; bit value 1 is 'foreground
color'. Bit 0 (LSB) of a word is the leftmost pixel of this word
on the screen, bit 31 (MSB) of a word is the rightmost pixel.

