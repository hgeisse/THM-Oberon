MODULE PCLink2;

  (* NW 25.07.2013
     HG 13.11.2019
     HG 20.05.2020 Extended Oberon
     HG 30.08.2021 Extended Oberon 1.6 *)

  IMPORT SYSTEM, Files, Modules, Texts, TextFrames, Oberon;

  CONST
    data = -56;
    stat = -52;
    BlkLen = 255;
    ACK = 10H;
    NAK = 11H;
    REQ = 20H;
    REC = 21H;
    SND = 22H;
    CAL = 23H;

  VAR
    Tsk: Oberon.Task;
    W: Texts.Writer;
    T: Texts.Text;
    F: TextFrames.Frame;

  PROCEDURE RecByte(VAR x: BYTE);
  BEGIN
    REPEAT
    UNTIL SYSTEM.BIT(stat, 0);
    SYSTEM.GET(data, x)
  END RecByte;

  PROCEDURE RecString(VAR s: ARRAY OF CHAR);
    VAR
      i: INTEGER;
      x: BYTE;
  BEGIN
    i := 0;
    RecByte(x);
    WHILE x > 0 DO
      s[i] := CHR(x);
      INC(i);
      RecByte(x)
    END;
    s[i] := 0X
  END RecString;

  PROCEDURE SndByte(x: BYTE);
  BEGIN
    REPEAT
    UNTIL SYSTEM.BIT(stat, 1);
    SYSTEM.PUT(data, x)
  END SndByte;

  PROCEDURE SndString(s: ARRAY OF CHAR);
    VAR
      i: INTEGER;
      x: BYTE;
  BEGIN
    i := 0;
    REPEAT
      x := ORD(s[i]);
      SndByte(x);
      INC(i)
    UNTIL x = 0
  END SndString;

  PROCEDURE Ping;
  BEGIN
    SndByte(ACK)
  END Ping;

  PROCEDURE RecFile;
    VAR
      name: ARRAY 32 OF CHAR;
      F: Files.File;
      R: Files.Rider;
      x: BYTE;
      len: INTEGER;
      i: INTEGER;
      buf: ARRAY 256 OF BYTE;
  BEGIN
    SndByte(ACK);
    RecString(name);
    F := Files.New(name);
    IF F # NIL THEN
      Texts.WriteString(W, "receiving ");
      Texts.WriteString(W, name);
      Texts.Append(Oberon.Log, W.buf);
      Files.Set(R, F, 0);
      SndByte(ACK);
      REPEAT
        RecByte(x);
        len := x;
        i := 0;
        WHILE i < len DO
          RecByte(x);
          buf[i] := x;
          INC(i)
        END;
        i := 0;
        WHILE i < len DO
          Files.WriteByte(R, buf[i]);
          INC(i)
        END;
        SndByte(ACK)
      UNTIL len < 255;
      Files.Register(F);
      Texts.WriteString(W, " done");
      Texts.WriteLn(W);
      Texts.Append(Oberon.Log, W.buf);
      RecByte(x);
      IF x = REQ THEN
        SndByte(ACK)
      ELSE
        SndByte(NAK)
      END
    ELSE
      SndByte(NAK)
    END
  END RecFile;

  PROCEDURE SndFile;
    VAR
      name: ARRAY 32 OF CHAR;
      F: Files.File;
      R: Files.Rider;
      len: INTEGER;
      len1: BYTE;
      n: INTEGER;
      x: BYTE;
      ack: BYTE;
  BEGIN
    SndByte(ACK);
    RecString(name);
    F := Files.Old(name);
    IF F # NIL THEN
      Texts.WriteString(W, "sending ");
      Texts.WriteString(W, name);
      Texts.Append(Oberon.Log, W.buf);
      len := Files.Length(F);
      Files.Set(R, F, 0);
      SndByte(ACK);
      REPEAT
        IF len >= BlkLen THEN
          len1 := BlkLen
        ELSE
          len1 := len
        END;
        SndByte(len1);
        n := len1;
        len := len - len1;
        WHILE n > 0 DO
          Files.ReadByte(R, x);
          SndByte(x);
          DEC(n)
        END;
        RecByte(ack);
        IF ack # ACK THEN
          len1 := 0
        END
      UNTIL len1 < BlkLen;
      Texts.WriteString(W, " done");
      Texts.WriteLn(W);
      Texts.Append(Oberon.Log, W.buf);
      RecByte(x);
      IF x = REQ THEN
        SndByte(ACK)
      ELSE
        SndByte(NAK)
      END
    ELSE
      SndByte(NAK)
    END
  END SndFile;

  PROCEDURE Calln;
    VAR
      name: ARRAY 32 OF CHAR;
      argc, k: BYTE;
      argv: ARRAY 10 OF ARRAY 100 OF CHAR;
      buf: Texts.Buffer;
      res: INTEGER;
  BEGIN
    SndByte(ACK);
    RecString(name);
    SndByte(ACK);
    RecByte(argc);
    k := 0;
    WHILE k < argc DO
      RecString(argv[k]);
      SndByte(ACK);
      INC(k);
    END;
    k := 0;
    WHILE k < argc DO
      Texts.WriteString(W, argv[k]);
      Texts.WriteString(W, " ");
      INC(k);
    END;
    Texts.WriteLn(W);
    NEW(buf);
    Texts.OpenBuf(buf);
    Texts.Delete(T, 0, T.len, buf);
    Texts.Append(T, W.buf);
    Oberon.SetPar(F, T, 0, 0, 0);
    Modules.Call(name, res);
    IF res > 0 THEN
      IF res = 1 THEN
        SndString("module not found")
      ELSIF res = 2 THEN
        SndString("bad version")
      ELSIF res = 3 THEN
        SndString("imports with bad key");
      ELSIF res = 4 THEN
        SndString("corrupted obj file")
      ELSIF res = 5 THEN
        SndString("command not found")
      ELSIF res = 7 THEN
        SndString("insufficient space")
      ELSE
        SndString("<unknown error code>")
      END
    ELSE
      SndString("done")
    END
  END Calln;

  PROCEDURE Task;
    VAR
      code: BYTE;
  BEGIN
    IF SYSTEM.BIT(stat, 0) THEN
      (* byte available *)
      RecByte(code);
      IF code = REQ THEN
        (* ping *)
        Ping
      ELSIF code = REC THEN
        (* receive file *)
        LED(30H);
        RecFile
      ELSIF code = SND THEN
        (* send file *)
        LED(20H);
        SndFile
      ELSIF code = CAL THEN
        (* call with arguments *)
        LED(10H);
        Calln
      END;
      LED(0)
    END
  END Task;

  PROCEDURE Run*;
  BEGIN
    Oberon.Install(Tsk);
    Texts.WriteString(W, "PCLink started");
    Texts.WriteLn(W);
    Texts.Append(Oberon.Log, W.buf)
  END Run;

  PROCEDURE Stop*;
  BEGIN
    Oberon.Remove(Tsk);
    Texts.WriteString(W, "PCLink stopped");
    Texts.WriteLn(W);
    Texts.Append(Oberon.Log, W.buf)
  END Stop;

BEGIN
  Texts.OpenWriter(W);
  Tsk := Oberon.NewTask(Task, 0);
  T := TextFrames.Text("");
  F := TextFrames.NewText(T, 0);
END PCLink2.
