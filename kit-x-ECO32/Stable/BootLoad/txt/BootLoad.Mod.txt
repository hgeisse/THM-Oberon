MODULE* BootLoad;
  (* NW 20.10.2013
     PR 04.02.2014: boot from SDHC disk or serial line
     HG 09.06.2018: re-definition of switches
     HG 24.11.2019: send ACK at end of load from serial line
     AP 13.03.2020: eliminate MT and MTOrg, set TR to TrapAdr
     HG 30.05.2020: set file system offset to zero
     HG 28.06.2020: modify for use on ECO32
     HG 28.08.2020: boot from SDHC disk of ECO32 *)
  IMPORT SYSTEM;
  (* sw1: boot from serial line/not SDHC disk
     sw0: enforce cold boot *)
  CONST
    TR = 28;
    SP = 29;
    LNK = 31;
    TrapAdr = 0C0000008H;
    MemLim = 0C00E7EF0H;
    stackOrg = 0C0080000H;
    swi = 0F1000000H;
    RxStatus = 0F0300000H;
    RxData = 0F0300004H;
    TxStatus = 0F0300008H;
    TxData = 0F030000CH;
    ramStart = 0C0000000H;
    FSoffset = 0H;  (* file system offset, in 512-byte SD card blocks *)
    ACK = 10H;
    (* SD card *)
    SDCctrl = 0F0600000H;
    SDCdata = 0F0600004H;
    SDCcrc7 = 0F0600008H;
    SDCcrc16 = 0F060000CH;
    SDCselect = 0;
    SDCfastclk = 1;
    SDCcrc16miso = 2;
    SDCready = 0;
    StartBlockToken = 0FEH;
  TYPE
    CMD = ARRAY 5 OF BYTE;
    RCV = ARRAY 5 OF BYTE;

(* ---------- line ------------ *)

  PROCEDURE RecByte(VAR x: BYTE);
    VAR y: INTEGER;
  BEGIN
    REPEAT
    UNTIL SYSTEM.BIT(RxStatus, 0);
    SYSTEM.GET(RxData, y);
    x := y;
  END RecByte;

  PROCEDURE RecInt(VAR x: INTEGER);
    VAR z, y, i: INTEGER; b: BYTE;
  BEGIN
    z := 0;
    i := 4;
    REPEAT
      i := i-1;
      RecByte(b);
      y := b;
      z := ROR(z+y, 8)
    UNTIL i = 0;
    x := z
  END RecInt;

  PROCEDURE SndByte(x: BYTE);
    VAR v: INTEGER;
  BEGIN
    REPEAT
    UNTIL SYSTEM.BIT(TxStatus, 0);
    v := x;
    SYSTEM.PUT(TxData, v)
  END SndByte;

  PROCEDURE LoadFromLine;
    VAR len, adr: INTEGER; dat: BYTE;
  BEGIN
    RecInt(len);
    WHILE len > 0 DO
      RecInt(adr);
      adr := adr + 0C0000000H;  (* convert phys addr to virt addr *)
      REPEAT
        RecByte(dat);
        SYSTEM.PUT(adr, dat);
        adr := adr + 1;
        len := len - 1
      UNTIL len = 0;
      RecInt(len)
    END;
    SndByte(ACK)
  END LoadFromLine;

(* ---------- disk ------------ *)

  PROCEDURE SndRcv(b: INTEGER): INTEGER;
    VAR r: INTEGER;
  BEGIN
    SYSTEM.PUT(SDCdata, b);
    REPEAT
    UNTIL SYSTEM.BIT(SDCctrl, SDCready);
    SYSTEM.GET(SDCdata, r);
    RETURN r
  END SndRcv;

  PROCEDURE SndCmd(VAR cmd: CMD; VAR rcv: RCV; size: INTEGER): INTEGER;
    VAR i, r, crc: INTEGER;
  BEGIN
    (* select *)
    SYSTEM.PUT(SDCctrl, { SDCselect });
    (* send command *)
    SYSTEM.PUT(SDCcrc7, 01H);
    FOR i := 0 TO 4 DO
      r := SndRcv(cmd[i]);
    END;
    SYSTEM.GET(SDCcrc7, crc);
    r := SndRcv(crc);
    (* receive answer *)
    i := 8;
    REPEAT
      r := SndRcv(0FFH);
      DEC(i);
    UNTIL (r # 0FFH) OR (i = 0);
    IF i = 0 THEN
      size := 0;
    ELSE
      rcv[0] := r;
      (* possibly receive more answer bytes *)
      FOR i := 1 TO size - 1 DO
        rcv[i] := SndRcv(0FFH);
      END;
      (* deselect *)
      SYSTEM.PUT(SDCctrl, {});
      r := SndRcv(0FFH);
    END;
    RETURN size
  END SndCmd;

  PROCEDURE InitSDCard;
    VAR i, r: INTEGER;
        cmd: CMD;
        rcv: RCV;
        cont: BOOLEAN;
  BEGIN
    (* init card *)
    SYSTEM.PUT(SDCctrl, {});
    FOR i := 0 TO 9 DO
      r := SndRcv(0FFH);
    END;
    (* reset card *)
    cmd[0] := 040H;
    cmd[1] := 000H; cmd[2] := 000H; cmd[3] := 000H; cmd[4] := 000H;
    r := SndCmd(cmd, rcv, 1);
    (* send interface condition *)
    cmd[0] := 048H;
    cmd[1] := 000H; cmd[2] := 000H; cmd[3] := 001H; cmd[4] := 0AAH;
    r := SndCmd(cmd, rcv, 5);
    (* set CRC option on *)
    cmd[0] := 07BH;
    cmd[1] := 000H; cmd[2] := 000H; cmd[3] := 000H; cmd[4] := 001H;
    r := SndCmd(cmd, rcv, 1);
    (* activate card *)
    i := 0;
    cont := TRUE;
    WHILE (i < 1000) & cont DO
      (* prep app command *)
      cmd[0] := 077H;
      cmd[1] := 000H; cmd[2] := 000H; cmd[3] := 000H; cmd[4] := 000H;
      r := SndCmd(cmd, rcv, 1);
      (* send host cap *)
      cmd[0] := 069H;
      cmd[1] := 040H; cmd[2] := 000H; cmd[3] := 000H; cmd[4] := 000H;
      r := SndCmd(cmd, rcv, 1);
      IF r = 0 THEN
        r := -1;
      ELSE
        r := rcv[0];
      END;
      (* check result for this round *)
      IF r = 0 THEN
        (* SD card activated *)
        cont := FALSE;
      ELSE
        (* SD card not activated in this round *)
        INC(i);
      END;
    END;
    (* check final result *)
    IF cont THEN
      (* card could not be activated *)
      LED(0F0H);
      REPEAT UNTIL FALSE;
    END;
    (* read operation conditions register *)
    cmd[0] := 07AH;
    cmd[1] := 000H; cmd[2] := 000H; cmd[3] := 000H; cmd[4] := 000H;
    r := SndCmd(cmd, rcv, 5);
    (* switch to fast clock *)
    SYSTEM.PUT(SDCctrl, { SDCfastclk });
  END InitSDCard;

  PROCEDURE ReadBlock(src, dst: INTEGER);
    (* read a single 512-byte SD card block,
       src: block #, dst: address of buffer *)
    VAR i, r, crc: INTEGER;
        cmd: CMD;
        b: BYTE;
  BEGIN
    cmd[0] := 051H;
    cmd[1] := (src DIV 01000000H) MOD 256;
    cmd[2] := (src DIV 00010000H) MOD 256;
    cmd[3] := (src DIV 00000100H) MOD 256;
    cmd[4] := src MOD 256;
    (* select *)
    SYSTEM.PUT(SDCctrl, { SDCfastclk, SDCselect });
    (* send command *)
    SYSTEM.PUT(SDCcrc7, 01H);
    FOR i := 0 TO 4 DO
      r := SndRcv(cmd[i]);
    END;
    SYSTEM.GET(SDCcrc7, crc);
    r := SndRcv(crc);
    (* receive answer *)
    i := 8;
    REPEAT
      r := SndRcv(0FFH);
      DEC(i);
    UNTIL (r # 0FFH) OR (i = 0);
    IF i = 0 THEN
      (* no answer *)
      LED(0F1H);
      REPEAT UNTIL FALSE;
    ELSE
      (* wait for start block token *)
      i := 2048;
      REPEAT
        r := SndRcv(0FFH);
        DEC(i);
      UNTIL (r = StartBlockToken) OR (i = 0);
      IF i = 0 THEN
        (* no start block token *)
        LED(0F2H);
        REPEAT UNTIL FALSE;
      ELSE
        (* reset CRC *)
        SYSTEM.PUT(SDCctrl, { SDCcrc16miso, SDCfastclk, SDCselect });
        SYSTEM.PUT(SDCcrc16, 0000H);
        (* receive data bytes *)
        FOR i := 0 TO 511 DO
          b := SndRcv(0FFH);
          SYSTEM.PUT(dst + i, b);
        END;
        (* receive CRC *)
        r := SndRcv(0FFH);
        r := SndRcv(0FFH);
        SYSTEM.GET(SDCcrc16, crc);
        (* deselect *)
        SYSTEM.PUT(SDCctrl, { SDCfastclk });
        r := SndRcv(0FFH);
        (* check CRC *)
        IF crc # 0 THEN
          (* CRC error *)
          LED(0F3H);
          REPEAT UNTIL FALSE;
        END;
      END;
    END;
  END ReadBlock;

  PROCEDURE LoadFromDisk;
    VAR src, dst, allocLimit: INTEGER;
  BEGIN
    src := FSoffset + 4;  (* start at boot block *)
    dst := ramStart;
    ReadBlock(src, dst);
    SYSTEM.GET(ramStart + 16, allocLimit);
    INC(src);
    INC(dst, 512);
    WHILE dst < allocLimit DO
      ReadBlock(src, dst);
      INC(src);
      INC(dst, 512)
    END
  END LoadFromDisk;

(* ---------- load ------------ *)

BEGIN
  SYSTEM.LDREG(SP, stackOrg);
  SYSTEM.LDREG(TR, TrapAdr);
  IF SYSTEM.BIT(swi, 0) THEN
    (* enforce cold start *)
    SYSTEM.LDREG(LNK, 0)
  END;
  IF SYSTEM.REG(LNK) = 0 THEN
    (* cold start *)
    LED(80H);
    InitSDCard;
    IF SYSTEM.BIT(swi, 1) THEN
      (* loading from serial line requested *)
      LED(81H);
      LoadFromLine
    ELSE
      (* loading from disk requested *)
      LED(82H);
      LoadFromDisk
    END
  END;
  SYSTEM.PUT(0C000000CH, MemLim);
  SYSTEM.PUT(0C0000018H, stackOrg);
  (* sync caches *)
  SYSTEM.CCTL(7);
  (* end of load *)
  LED(84H)
END BootLoad.
