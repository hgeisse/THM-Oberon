03-Sep-2021
	change CPU version of RISC5 simulator to 5.5

	enlarge address space of RISC5 simulator to 16 MB:
	RAM base:   0x000000
	RAM size:   0xFFE000 (16 MB - 8 KB)
	PROM base:  0xFFE000
	PROM size:  0x001000 (max, allocated from base)
	I/O base:   0xFFF000
	I/O size:   0x001000 (max, allocated from top)

	move display frame buffer (simulator) to high memory:
	dfb base:   0xFE0000 (16 MB - 128 KB, i.e., within RAM)
	dfb size:   0x018000 (1024 * 768 / 8, 1 bit per pixel)

	change origin and limit constants (PROM used in simulator):
	stackOrg:   0x800000 (8 MB)
	heapOrg:    ditto
	memLim:     0xFE0000 (i.e., the dsp base)
	heapLim:    ditto

	change software base to Andreas Pirklbauer's Extended-Oberon-1.6
	(see kit-RISC5/NOTES for changes from his release to our kit)


06-Sep-2021
	change CPU version of RISC5 hardware to 5.5
	enlarge address space of RISC5 hardware to 16 MB
	move display frame buffer (hardware) to high memory
	change origin and limit constants (PROM used in hardware)


14-Aug-2022
17-Aug-2022
	change CPU version of RISC5 simulator to 8.0
	re-interpret MOV' (form 0), v=0/1 instructions as PUTS/GETS
	these instructions write or read a special register, respectively
	the special register's number is encoded in the 4 LSBs (field "c")
	NOTES:
	1. The instruction code for reading the ID register is left as is
	   (0x3y000000, with the destination register in nibble y). This
	   way it is possible to detect the CPU version in any case.
	2. The contents of the ID register do *not* reflect the values of
	   the flags any longer, but only the CPU version (0x00000080) in
	   the 8 LSBs. The remaining 24 MSBs of the ID are currently set
	   to zero, but may be defined otherwise later.
	3. The instruction code for reading the H register *is* changed,
	   from 0x2y000000 to 0x3y000001.
	4. The instruction codes 0x2y00000s are reserved for *writing*
	   a special register (its number is in nibble "s"). The register
	   "y" becomes the source of this data transfer. Note that a write
	   to the ID register does not change the register's contents.
	5. Currently, the following special register numbers are assigned:
	     0: ID    CPU version as described above
	     1: H     the mul/div auxiliary register
	     2: X     exception register (was formerly the non-accessible
	              SPC register), exact bit assignments t.b.d.
	     3: PSW   processor status word, exact bit assignments t.b.d.
	     4: FPC   reserved for floating-point control
	6. In Oberon, the semantics of SYSTEM.H(x) with x = 0 or x = 1
	   is completely left unchanged: H(0) reads the H register, H(1)
	   reads the ID register.


11-Apr-2023
	tag version 1.0 (the last version that contains both Oberon
	implementations, RISC5 *and* ECO32)
	delete all ECO32 parts from the master branch


01-May-2023
	Add new and/or enhanced I/O devices:
	1. Add interrupt control to the millisecond timer.
	3. Add a new flag "transmitter empty" to the RS232 controller.
	2. Add interrupt control to the RS232 controller.
	4. The SD card controller now allows to inquire the card's capacity.
	5. Add a "shutdown device" (only usable in the simulator).
	   Writing to this device terminates the simulator with an exit
	   code. This is needed to automate running tests on the simulator.
	6. Add interrupt control to the high precision timer.
	7. Add a new controller for button/switches which can detect button
	   press/release actions in hardware, and can trigger an interrupt
	   on specific actions.
	8. Add a second high precision timer.
	9. Add a second RS232 controller.


30-Nov-2023
	1. Add a "logical shift right" instruction (LSR) to RISC5,
	   complementing the "arithmetical shift right" instruction (ASR).
	   Both formats, F0 and F1, are supported. The instruction coding
	   is that of ASR, but with the u-bit set. Affected components:
	   - simulator, including disassembler
	   - toolchain, including "showobj" tool
	   - FPGA implementation, but *not* v0
